# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from qovery.models.git_provider_enum import GitProviderEnum

class GitTokenResponse(BaseModel):
    """
    GitTokenResponse
    """
    id: StrictStr = Field(...)
    created_at: datetime = Field(...)
    updated_at: Optional[datetime] = None
    name: StrictStr = Field(...)
    description: Optional[StrictStr] = None
    type: GitProviderEnum = Field(...)
    expired_at: Optional[date] = None
    workspace: Optional[StrictStr] = Field(None, description="Mandatory only for BITBUCKET git provider")
    associated_services_count: Union[StrictFloat, StrictInt] = Field(..., description="The number of services using this git token")
    __properties = ["id", "created_at", "updated_at", "name", "description", "type", "expired_at", "workspace", "associated_services_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GitTokenResponse:
        """Create an instance of GitTokenResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created_at",
                            "updated_at",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GitTokenResponse:
        """Create an instance of GitTokenResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GitTokenResponse.parse_obj(obj)

        _obj = GitTokenResponse.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "expired_at": obj.get("expired_at"),
            "workspace": obj.get("workspace"),
            "associated_services_count": obj.get("associated_services_count")
        })
        return _obj


