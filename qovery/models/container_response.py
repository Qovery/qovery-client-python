# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conint, conlist
from qovery.models.container_registry_provider_details_response import ContainerRegistryProviderDetailsResponse
from qovery.models.healthcheck import Healthcheck
from qovery.models.reference_object import ReferenceObject
from qovery.models.service_port import ServicePort
from qovery.models.service_storage_storage_inner import ServiceStorageStorageInner

class ContainerResponse(BaseModel):
    """
    ContainerResponse
    """
    id: StrictStr = Field(...)
    created_at: datetime = Field(...)
    updated_at: Optional[datetime] = None
    storage: Optional[conlist(ServiceStorageStorageInner)] = None
    image_name: StrictStr = Field(..., description="The image name pattern differs according to chosen container registry provider: * `ECR`: `repository` * `SCALEWAY_CR`: `namespace/image` * `DOCKER_HUB`: `image` or `repository/image` * `PUBLIC_ECR`: `registry_alias/repository` ")
    tag: StrictStr = Field(..., description="tag of the image container")
    registry_id: Optional[StrictStr] = Field(None, description="tag of the image container")
    registry: ContainerRegistryProviderDetailsResponse = Field(...)
    environment: ReferenceObject = Field(...)
    maximum_cpu: StrictInt = Field(..., description="Maximum cpu that can be allocated to the container based on organization cluster configuration. unit is millicores (m). 1000m = 1 cpu")
    maximum_memory: StrictInt = Field(..., description="Maximum memory that can be allocated to the container based on organization cluster configuration. unit is MB. 1024 MB = 1GB")
    name: StrictStr = Field(..., description="name is case insensitive")
    description: Optional[StrictStr] = Field(None, description="give a description to this container")
    arguments: Optional[conlist(StrictStr)] = None
    entrypoint: Optional[StrictStr] = Field(None, description="optional entrypoint when launching container")
    cpu: StrictInt = Field(..., description="unit is millicores (m). 1000m = 1 cpu")
    memory: StrictInt = Field(..., description="unit is MB. 1024 MB = 1GB")
    min_running_instances: conint(strict=True, ge=0) = Field(..., description="Minimum number of instances running. This resource auto-scale based on the CPU and Memory consumption. Note: 0 means that there is no container running. ")
    max_running_instances: StrictInt = Field(..., description="Maximum number of instances running. This resource auto-scale based on the CPU and Memory consumption. Note: -1 means that there is no limit. ")
    healthchecks: Healthcheck = Field(...)
    auto_preview: StrictBool = Field(..., description="Indicates if the 'environment preview option' is enabled for this container.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called.   If not specified, it takes the value of the `auto_preview` property from the associated environment. ")
    ports: Optional[conlist(ServicePort)] = None
    auto_deploy: Optional[StrictBool] = Field(None, description="Specify if the container will be automatically updated after receiving a new image tag.  The new image tag shall be communicated via the \"Auto Deploy container\" endpoint https://api-doc.qovery.com/#tag/Containers/operation/autoDeployContainerEnvironments ")
    __properties = ["id", "created_at", "updated_at", "storage", "image_name", "tag", "registry_id", "registry", "environment", "maximum_cpu", "maximum_memory", "name", "description", "arguments", "entrypoint", "cpu", "memory", "min_running_instances", "max_running_instances", "healthchecks", "auto_preview", "ports", "auto_deploy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ContainerResponse:
        """Create an instance of ContainerResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created_at",
                            "updated_at",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in storage (list)
        _items = []
        if self.storage:
            for _item in self.storage:
                if _item:
                    _items.append(_item.to_dict())
            _dict['storage'] = _items
        # override the default output from pydantic by calling `to_dict()` of registry
        if self.registry:
            _dict['registry'] = self.registry.to_dict()
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of healthchecks
        if self.healthchecks:
            _dict['healthchecks'] = self.healthchecks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item in self.ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ports'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ContainerResponse:
        """Create an instance of ContainerResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ContainerResponse.parse_obj(obj)

        _obj = ContainerResponse.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "storage": [ServiceStorageStorageInner.from_dict(_item) for _item in obj.get("storage")] if obj.get("storage") is not None else None,
            "image_name": obj.get("image_name"),
            "tag": obj.get("tag"),
            "registry_id": obj.get("registry_id"),
            "registry": ContainerRegistryProviderDetailsResponse.from_dict(obj.get("registry")) if obj.get("registry") is not None else None,
            "environment": ReferenceObject.from_dict(obj.get("environment")) if obj.get("environment") is not None else None,
            "maximum_cpu": obj.get("maximum_cpu"),
            "maximum_memory": obj.get("maximum_memory"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "arguments": obj.get("arguments"),
            "entrypoint": obj.get("entrypoint"),
            "cpu": obj.get("cpu"),
            "memory": obj.get("memory"),
            "min_running_instances": obj.get("min_running_instances") if obj.get("min_running_instances") is not None else 1,
            "max_running_instances": obj.get("max_running_instances") if obj.get("max_running_instances") is not None else 1,
            "healthchecks": Healthcheck.from_dict(obj.get("healthchecks")) if obj.get("healthchecks") is not None else None,
            "auto_preview": obj.get("auto_preview"),
            "ports": [ServicePort.from_dict(_item) for _item in obj.get("ports")] if obj.get("ports") is not None else None,
            "auto_deploy": obj.get("auto_deploy")
        })
        return _obj


