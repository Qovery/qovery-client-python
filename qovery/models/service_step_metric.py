# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from qovery.models.service_step_metric_name_enum import ServiceStepMetricNameEnum
from qovery.models.step_metric_status_enum import StepMetricStatusEnum

class ServiceStepMetric(BaseModel):
    """
    ServiceStepMetric
    """
    step_name: Optional[ServiceStepMetricNameEnum] = None
    status: Optional[StepMetricStatusEnum] = None
    duration_sec: Optional[StrictInt] = Field(None, description="The duration of the step in seconds.")
    __properties = ["step_name", "status", "duration_sec"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServiceStepMetric:
        """Create an instance of ServiceStepMetric from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceStepMetric:
        """Create an instance of ServiceStepMetric from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServiceStepMetric.parse_obj(obj)

        _obj = ServiceStepMetric.parse_obj({
            "step_name": obj.get("step_name"),
            "status": obj.get("status"),
            "duration_sec": obj.get("duration_sec")
        })
        return _obj


