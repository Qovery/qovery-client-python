# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from qovery.models.organization_custom_role_update_request_project_permissions_inner_permissions_inner import OrganizationCustomRoleUpdateRequestProjectPermissionsInnerPermissionsInner

class OrganizationCustomRoleProjectPermissionsInner(BaseModel):
    """
    OrganizationCustomRoleProjectPermissionsInner
    """
    project_id: Optional[StrictStr] = None
    project_name: Optional[StrictStr] = None
    is_admin: Optional[StrictBool] = Field(False, description="If `is_admin` is `true`, the user is: - automatically `MANAGER` for each environment type - allowed to manage project deployment rules - able to delete the project    Note that `permissions` can then be ignored for this project ")
    permissions: Optional[conlist(OrganizationCustomRoleUpdateRequestProjectPermissionsInnerPermissionsInner)] = None
    __properties = ["project_id", "project_name", "is_admin", "permissions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrganizationCustomRoleProjectPermissionsInner:
        """Create an instance of OrganizationCustomRoleProjectPermissionsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in permissions (list)
        _items = []
        if self.permissions:
            for _item in self.permissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['permissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrganizationCustomRoleProjectPermissionsInner:
        """Create an instance of OrganizationCustomRoleProjectPermissionsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrganizationCustomRoleProjectPermissionsInner.parse_obj(obj)

        _obj = OrganizationCustomRoleProjectPermissionsInner.parse_obj({
            "project_id": obj.get("project_id"),
            "project_name": obj.get("project_name"),
            "is_admin": obj.get("is_admin") if obj.get("is_admin") is not None else False,
            "permissions": [OrganizationCustomRoleUpdateRequestProjectPermissionsInnerPermissionsInner.from_dict(_item) for _item in obj.get("permissions")] if obj.get("permissions") is not None else None
        })
        return _obj


