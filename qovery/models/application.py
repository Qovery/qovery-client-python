# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from qovery.models.application_git_repository import ApplicationGitRepository
from qovery.models.build_mode_enum import BuildModeEnum
from qovery.models.build_pack_language_enum import BuildPackLanguageEnum
from qovery.models.healthcheck import Healthcheck
from qovery.models.reference_object import ReferenceObject
from qovery.models.service_port import ServicePort
from qovery.models.service_storage_storage_inner import ServiceStorageStorageInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Application(BaseModel):
    """
    Application
    """ # noqa: E501
    id: StrictStr
    created_at: datetime
    updated_at: Optional[datetime] = None
    storage: Optional[List[ServiceStorageStorageInner]] = None
    environment: ReferenceObject
    git_repository: Optional[ApplicationGitRepository] = None
    maximum_cpu: Optional[StrictInt] = Field(default=None, description="Maximum cpu that can be allocated to the application based on organization cluster configuration. unit is millicores (m). 1000m = 1 cpu")
    maximum_memory: Optional[StrictInt] = Field(default=None, description="Maximum memory that can be allocated to the application based on organization cluster configuration. unit is MB. 1024 MB = 1GB")
    name: StrictStr = Field(description="name is case insensitive")
    description: Optional[StrictStr] = Field(default=None, description="give a description to this application")
    build_mode: Optional[BuildModeEnum] = None
    dockerfile_path: Optional[StrictStr] = Field(default=None, description="The path of the associated Dockerfile. Only if you are using build_mode = DOCKER")
    buildpack_language: Optional[BuildPackLanguageEnum] = None
    cpu: Optional[StrictInt] = Field(default=None, description="unit is millicores (m). 1000m = 1 cpu")
    memory: Optional[StrictInt] = Field(default=None, description="unit is MB. 1024 MB = 1GB")
    min_running_instances: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=1, description="Minimum number of instances running. This resource auto-scale based on the CPU and Memory consumption. Note: 0 means that there is no application running. ")
    max_running_instances: Optional[StrictInt] = Field(default=1, description="Maximum number of instances running. This resource auto-scale based on the CPU and Memory consumption. Note: -1 means that there is no limit. ")
    healthchecks: Healthcheck
    auto_preview: Optional[StrictBool] = Field(default=True, description="Specify if the environment preview option is activated or not for this application.   If activated, a preview environment will be automatically cloned at each pull request.   If not specified, it takes the value of the `auto_preview` property from the associated environment. ")
    ports: Optional[List[ServicePort]] = None
    arguments: Optional[List[StrictStr]] = None
    entrypoint: Optional[StrictStr] = Field(default=None, description="optional entrypoint when launching container")
    auto_deploy: Optional[StrictBool] = Field(default=None, description="Specify if the application will be automatically updated after receiving a new commit.")
    __properties: ClassVar[List[str]] = ["id", "created_at", "updated_at", "storage", "environment", "git_repository", "maximum_cpu", "maximum_memory", "name", "description", "build_mode", "dockerfile_path", "buildpack_language", "cpu", "memory", "min_running_instances", "max_running_instances", "healthchecks", "auto_preview", "ports", "arguments", "entrypoint", "auto_deploy"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Application from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "id",
                "created_at",
                "updated_at",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in storage (list)
        _items = []
        if self.storage:
            for _item in self.storage:
                if _item:
                    _items.append(_item.to_dict())
            _dict['storage'] = _items
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git_repository
        if self.git_repository:
            _dict['git_repository'] = self.git_repository.to_dict()
        # override the default output from pydantic by calling `to_dict()` of healthchecks
        if self.healthchecks:
            _dict['healthchecks'] = self.healthchecks.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item in self.ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ports'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if dockerfile_path (nullable) is None
        # and model_fields_set contains the field
        if self.dockerfile_path is None and "dockerfile_path" in self.model_fields_set:
            _dict['dockerfile_path'] = None

        # set to None if buildpack_language (nullable) is None
        # and model_fields_set contains the field
        if self.buildpack_language is None and "buildpack_language" in self.model_fields_set:
            _dict['buildpack_language'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Application from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "storage": [ServiceStorageStorageInner.from_dict(_item) for _item in obj.get("storage")] if obj.get("storage") is not None else None,
            "environment": ReferenceObject.from_dict(obj.get("environment")) if obj.get("environment") is not None else None,
            "git_repository": ApplicationGitRepository.from_dict(obj.get("git_repository")) if obj.get("git_repository") is not None else None,
            "maximum_cpu": obj.get("maximum_cpu"),
            "maximum_memory": obj.get("maximum_memory"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "build_mode": obj.get("build_mode"),
            "dockerfile_path": obj.get("dockerfile_path"),
            "buildpack_language": obj.get("buildpack_language"),
            "cpu": obj.get("cpu"),
            "memory": obj.get("memory"),
            "min_running_instances": obj.get("min_running_instances") if obj.get("min_running_instances") is not None else 1,
            "max_running_instances": obj.get("max_running_instances") if obj.get("max_running_instances") is not None else 1,
            "healthchecks": Healthcheck.from_dict(obj.get("healthchecks")) if obj.get("healthchecks") is not None else None,
            "auto_preview": obj.get("auto_preview") if obj.get("auto_preview") is not None else True,
            "ports": [ServicePort.from_dict(_item) for _item in obj.get("ports")] if obj.get("ports") is not None else None,
            "arguments": obj.get("arguments"),
            "entrypoint": obj.get("entrypoint"),
            "auto_deploy": obj.get("auto_deploy")
        })
        return _obj


