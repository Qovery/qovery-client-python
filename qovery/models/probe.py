# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt
from qovery.models.probe_type import ProbeType

class Probe(BaseModel):
    """
    Probe
    """
    type: Optional[ProbeType] = None
    initial_delay_seconds: Optional[StrictInt] = 30
    period_seconds: Optional[StrictInt] = 10
    timeout_seconds: Optional[StrictInt] = 5
    success_threshold: Optional[StrictInt] = 1
    failure_threshold: Optional[StrictInt] = 9
    __properties = ["type", "initial_delay_seconds", "period_seconds", "timeout_seconds", "success_threshold", "failure_threshold"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Probe:
        """Create an instance of Probe from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of type
        if self.type:
            _dict['type'] = self.type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Probe:
        """Create an instance of Probe from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Probe.parse_obj(obj)

        _obj = Probe.parse_obj({
            "type": ProbeType.from_dict(obj.get("type")) if obj.get("type") is not None else None,
            "initial_delay_seconds": obj.get("initial_delay_seconds") if obj.get("initial_delay_seconds") is not None else 30,
            "period_seconds": obj.get("period_seconds") if obj.get("period_seconds") is not None else 10,
            "timeout_seconds": obj.get("timeout_seconds") if obj.get("timeout_seconds") is not None else 5,
            "success_threshold": obj.get("success_threshold") if obj.get("success_threshold") is not None else 1,
            "failure_threshold": obj.get("failure_threshold") if obj.get("failure_threshold") is not None else 9
        })
        return _obj


