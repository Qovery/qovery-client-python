# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from qovery.models.cloud_provider_enum import CloudProviderEnum
from qovery.models.cluster_cloud_provider_info_request import ClusterCloudProviderInfoRequest
from qovery.models.cluster_request_features_inner import ClusterRequestFeaturesInner
from qovery.models.kubernetes_enum import KubernetesEnum

class ClusterRequest(BaseModel):
    """
    ClusterRequest
    """
    name: StrictStr = Field(..., description="name is case-insensitive")
    description: Optional[StrictStr] = None
    region: StrictStr = Field(...)
    cloud_provider: CloudProviderEnum = Field(...)
    cloud_provider_credentials: Optional[ClusterCloudProviderInfoRequest] = None
    min_running_nodes: Optional[StrictInt] = 1
    max_running_nodes: Optional[StrictInt] = 1
    disk_size: Optional[StrictInt] = Field(40, description="Unit is in GB. The disk size to be used for the node configuration")
    instance_type: Optional[StrictStr] = Field(None, description="the instance type to be used for this cluster. The list of values can be retrieved via the endpoint /{CloudProvider}/instanceType")
    kubernetes: Optional[KubernetesEnum] = None
    production: Optional[StrictBool] = Field(None, description="specific flag to indicate that this cluster is a production one")
    ssh_keys: Optional[conlist(StrictStr)] = Field(None, description="Indicate your public ssh_key to remotely connect to your EC2 instance.")
    kubeconfig: Optional[StrictStr] = Field(None, description="If the cluster is a self managed one. The kubeconfig to use to connect to it")
    features: Optional[conlist(ClusterRequestFeaturesInner)] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["name", "description", "region", "cloud_provider", "cloud_provider_credentials", "min_running_nodes", "max_running_nodes", "disk_size", "instance_type", "kubernetes", "production", "ssh_keys", "kubeconfig", "features"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClusterRequest:
        """Create an instance of ClusterRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cloud_provider_credentials
        if self.cloud_provider_credentials:
            _dict['cloud_provider_credentials'] = self.cloud_provider_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item in self.features:
                if _item:
                    _items.append(_item.to_dict())
            _dict['features'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClusterRequest:
        """Create an instance of ClusterRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClusterRequest.parse_obj(obj)

        _obj = ClusterRequest.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "region": obj.get("region"),
            "cloud_provider": obj.get("cloud_provider"),
            "cloud_provider_credentials": ClusterCloudProviderInfoRequest.from_dict(obj.get("cloud_provider_credentials")) if obj.get("cloud_provider_credentials") is not None else None,
            "min_running_nodes": obj.get("min_running_nodes") if obj.get("min_running_nodes") is not None else 1,
            "max_running_nodes": obj.get("max_running_nodes") if obj.get("max_running_nodes") is not None else 1,
            "disk_size": obj.get("disk_size") if obj.get("disk_size") is not None else 40,
            "instance_type": obj.get("instance_type"),
            "kubernetes": obj.get("kubernetes"),
            "production": obj.get("production"),
            "ssh_keys": obj.get("ssh_keys"),
            "kubeconfig": obj.get("kubeconfig"),
            "features": [ClusterRequestFeaturesInner.from_dict(_item) for _item in obj.get("features")] if obj.get("features") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


