# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class EnvironmentVariableRequest(BaseModel):
    """
    EnvironmentVariableRequest
    """
    key: StrictStr = Field(..., description="key is case sensitive.")
    value: Optional[StrictStr] = Field(None, description="value of the env variable.")
    mount_path: Optional[StrictStr] = Field(None, description="should be set for file only. variable mount path makes variable a file (where file should be mounted).")
    __properties = ["key", "value", "mount_path"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EnvironmentVariableRequest:
        """Create an instance of EnvironmentVariableRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if mount_path (nullable) is None
        # and __fields_set__ contains the field
        if self.mount_path is None and "mount_path" in self.__fields_set__:
            _dict['mount_path'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EnvironmentVariableRequest:
        """Create an instance of EnvironmentVariableRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EnvironmentVariableRequest.parse_obj(obj)

        _obj = EnvironmentVariableRequest.parse_obj({
            "key": obj.get("key"),
            "value": obj.get("value"),
            "mount_path": obj.get("mount_path")
        })
        return _obj


