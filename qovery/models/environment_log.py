# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from qovery.models.environment_log_scope import EnvironmentLogScope
from qovery.models.status_kind_enum import StatusKindEnum

class EnvironmentLog(BaseModel):
    """
    EnvironmentLog
    """
    id: StrictStr = Field(...)
    created_at: datetime = Field(...)
    scope: Optional[EnvironmentLogScope] = None
    state: Optional[StatusKindEnum] = None
    message: Optional[StrictStr] = Field(..., description="Log message")
    execution_id: Optional[StrictStr] = Field(None, description="Only for errors. Helps Qovery team to investigate.")
    hint: Optional[StrictStr] = None
    __properties = ["id", "created_at", "scope", "state", "message", "execution_id", "hint"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EnvironmentLog:
        """Create an instance of EnvironmentLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of scope
        if self.scope:
            _dict['scope'] = self.scope.to_dict()
        # set to None if message (nullable) is None
        # and __fields_set__ contains the field
        if self.message is None and "message" in self.__fields_set__:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EnvironmentLog:
        """Create an instance of EnvironmentLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EnvironmentLog.parse_obj(obj)

        _obj = EnvironmentLog.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "scope": EnvironmentLogScope.from_dict(obj.get("scope")) if obj.get("scope") is not None else None,
            "state": obj.get("state"),
            "message": obj.get("message"),
            "execution_id": obj.get("execution_id"),
            "hint": obj.get("hint")
        })
        return _obj


