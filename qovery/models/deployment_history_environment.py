# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from qovery.models.deployment_history_application import DeploymentHistoryApplication
from qovery.models.deployment_history_container import DeploymentHistoryContainer
from qovery.models.deployment_history_database import DeploymentHistoryDatabase
from qovery.models.deployment_history_helm_response import DeploymentHistoryHelmResponse
from qovery.models.deployment_history_job_response import DeploymentHistoryJobResponse
from qovery.models.organization_event_origin import OrganizationEventOrigin
from qovery.models.state_enum import StateEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DeploymentHistoryEnvironment(BaseModel):
    """
    DeploymentHistoryEnvironment
    """ # noqa: E501
    id: StrictStr
    created_at: datetime
    updated_at: Optional[datetime] = None
    status: Optional[StateEnum] = None
    origin: Optional[OrganizationEventOrigin] = None
    triggered_by: Optional[StrictStr] = None
    applications: Optional[List[DeploymentHistoryApplication]] = None
    containers: Optional[List[DeploymentHistoryContainer]] = None
    databases: Optional[List[DeploymentHistoryDatabase]] = None
    jobs: Optional[List[DeploymentHistoryJobResponse]] = None
    helms: Optional[List[DeploymentHistoryHelmResponse]] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "updated_at", "status", "origin", "triggered_by", "applications", "containers", "databases", "jobs", "helms"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DeploymentHistoryEnvironment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "id",
                "created_at",
                "updated_at",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in applications (list)
        _items = []
        if self.applications:
            for _item in self.applications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['applications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in containers (list)
        _items = []
        if self.containers:
            for _item in self.containers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['containers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in databases (list)
        _items = []
        if self.databases:
            for _item in self.databases:
                if _item:
                    _items.append(_item.to_dict())
            _dict['databases'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item in self.jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['jobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in helms (list)
        _items = []
        if self.helms:
            for _item in self.helms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['helms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DeploymentHistoryEnvironment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "status": obj.get("status"),
            "origin": obj.get("origin"),
            "triggered_by": obj.get("triggered_by"),
            "applications": [DeploymentHistoryApplication.from_dict(_item) for _item in obj.get("applications")] if obj.get("applications") is not None else None,
            "containers": [DeploymentHistoryContainer.from_dict(_item) for _item in obj.get("containers")] if obj.get("containers") is not None else None,
            "databases": [DeploymentHistoryDatabase.from_dict(_item) for _item in obj.get("databases")] if obj.get("databases") is not None else None,
            "jobs": [DeploymentHistoryJobResponse.from_dict(_item) for _item in obj.get("jobs")] if obj.get("jobs") is not None else None,
            "helms": [DeploymentHistoryHelmResponse.from_dict(_item) for _item in obj.get("helms")] if obj.get("helms") is not None else None
        })
        return _obj


