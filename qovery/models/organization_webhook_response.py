# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from qovery.models.environment_mode_enum import EnvironmentModeEnum
from qovery.models.organization_webhook_event_enum import OrganizationWebhookEventEnum
from qovery.models.organization_webhook_kind_enum import OrganizationWebhookKindEnum

class OrganizationWebhookResponse(BaseModel):
    """
    OrganizationWebhookResponse
    """
    id: StrictStr = Field(...)
    created_at: datetime = Field(...)
    updated_at: Optional[datetime] = None
    kind: Optional[OrganizationWebhookKindEnum] = None
    target_url: Optional[StrictStr] = Field(None, description="Set the public HTTP or HTTPS endpoint that will receive the specified events. The target URL must starts with `http://` or `https://` ")
    target_secret_set: Optional[StrictBool] = None
    description: Optional[StrictStr] = None
    enabled: Optional[StrictBool] = Field(None, description="Turn on or off your endpoint.")
    events: Optional[conlist(OrganizationWebhookEventEnum)] = None
    project_names_filter: Optional[conlist(StrictStr)] = Field(None, description="Specify the project names you want to filter to.  This webhook will be triggered only if the event is coming from the specified Project IDs. Notes: 1. Wildcard is accepted E.g. `product*`. 2. Name is case insensitive. ")
    environment_types_filter: Optional[conlist(EnvironmentModeEnum)] = Field(None, description="Specify the environment modes you want to filter to. This webhook will be triggered only if the event is coming from an environment with the specified mode. ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["id", "created_at", "updated_at", "kind", "target_url", "target_secret_set", "description", "enabled", "events", "project_names_filter", "environment_types_filter"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrganizationWebhookResponse:
        """Create an instance of OrganizationWebhookResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created_at",
                            "updated_at",
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrganizationWebhookResponse:
        """Create an instance of OrganizationWebhookResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrganizationWebhookResponse.parse_obj(obj)

        _obj = OrganizationWebhookResponse.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "kind": obj.get("kind"),
            "target_url": obj.get("target_url"),
            "target_secret_set": obj.get("target_secret_set"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "events": obj.get("events"),
            "project_names_filter": obj.get("project_names_filter"),
            "environment_types_filter": obj.get("environment_types_filter")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


