# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict
from pydantic import BaseModel, Field, StrictBool
from qovery.models.helm_repository_kind_enum import HelmRepositoryKindEnum

class AvailableHelmRepositoryResponse(BaseModel):
    """
    AvailableHelmRepositoryResponse
    """
    kind: HelmRepositoryKindEnum = Field(...)
    required_config: Dict[str, Any] = Field(...)
    is_mandatory: StrictBool = Field(...)
    __properties = ["kind", "required_config", "is_mandatory"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AvailableHelmRepositoryResponse:
        """Create an instance of AvailableHelmRepositoryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AvailableHelmRepositoryResponse:
        """Create an instance of AvailableHelmRepositoryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AvailableHelmRepositoryResponse.parse_obj(obj)

        _obj = AvailableHelmRepositoryResponse.parse_obj({
            "kind": obj.get("kind"),
            "required_config": obj.get("required_config"),
            "is_mandatory": obj.get("is_mandatory")
        })
        return _obj


