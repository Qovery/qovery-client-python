# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class ClusterFeatureGcpExistingVpc(BaseModel):
    """
    ClusterFeatureGcpExistingVpc
    """
    vpc_name: StrictStr = Field(...)
    vpc_project_id: Optional[StrictStr] = None
    subnetwork_name: Optional[StrictStr] = None
    ip_range_services_name: Optional[StrictStr] = None
    ip_range_pods_name: Optional[StrictStr] = None
    additional_ip_range_pods_names: Optional[conlist(StrictStr)] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["vpc_name", "vpc_project_id", "subnetwork_name", "ip_range_services_name", "ip_range_pods_name", "additional_ip_range_pods_names"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClusterFeatureGcpExistingVpc:
        """Create an instance of ClusterFeatureGcpExistingVpc from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if vpc_project_id (nullable) is None
        # and __fields_set__ contains the field
        if self.vpc_project_id is None and "vpc_project_id" in self.__fields_set__:
            _dict['vpc_project_id'] = None

        # set to None if subnetwork_name (nullable) is None
        # and __fields_set__ contains the field
        if self.subnetwork_name is None and "subnetwork_name" in self.__fields_set__:
            _dict['subnetwork_name'] = None

        # set to None if ip_range_services_name (nullable) is None
        # and __fields_set__ contains the field
        if self.ip_range_services_name is None and "ip_range_services_name" in self.__fields_set__:
            _dict['ip_range_services_name'] = None

        # set to None if ip_range_pods_name (nullable) is None
        # and __fields_set__ contains the field
        if self.ip_range_pods_name is None and "ip_range_pods_name" in self.__fields_set__:
            _dict['ip_range_pods_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClusterFeatureGcpExistingVpc:
        """Create an instance of ClusterFeatureGcpExistingVpc from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClusterFeatureGcpExistingVpc.parse_obj(obj)

        _obj = ClusterFeatureGcpExistingVpc.parse_obj({
            "vpc_name": obj.get("vpc_name"),
            "vpc_project_id": obj.get("vpc_project_id"),
            "subnetwork_name": obj.get("subnetwork_name"),
            "ip_range_services_name": obj.get("ip_range_services_name"),
            "ip_range_pods_name": obj.get("ip_range_pods_name"),
            "additional_ip_range_pods_names": obj.get("additional_ip_range_pods_names")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


