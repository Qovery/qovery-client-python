# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from qovery.models.cloud_provider_enum import CloudProviderEnum
from qovery.models.cluster_deployment_status_enum import ClusterDeploymentStatusEnum
from qovery.models.cluster_feature import ClusterFeature
from qovery.models.cluster_state_enum import ClusterStateEnum
from qovery.models.kubernetes_enum import KubernetesEnum
from qovery.models.reference_object import ReferenceObject
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class Cluster(BaseModel):
    """
    Cluster
    """ # noqa: E501
    id: StrictStr
    created_at: datetime
    updated_at: Optional[datetime] = None
    organization: ReferenceObject
    name: StrictStr = Field(description="name is case-insensitive")
    description: Optional[StrictStr] = None
    region: StrictStr
    cloud_provider: CloudProviderEnum
    min_running_nodes: Optional[StrictInt] = 1
    max_running_nodes: Optional[StrictInt] = 1
    disk_size: Optional[StrictInt] = Field(default=20, description="Unit is in GB. The disk size to be used for the node configuration")
    instance_type: Optional[StrictStr] = Field(default=None, description="the instance type to be used for this cluster. The list of values can be retrieved via the endpoint /{CloudProvider}/instanceType")
    kubernetes: Optional[KubernetesEnum] = None
    cpu: Optional[StrictInt] = Field(default=None, description="unit is millicores (m). 1000m = 1 cpu")
    memory: Optional[StrictInt] = Field(default=None, description="unit is MB. 1024 MB = 1GB")
    estimated_cloud_provider_cost: Optional[StrictInt] = Field(default=None, description="This is an estimation of the cost this cluster will represent on your cloud proider bill, based on your current configuration")
    status: Optional[ClusterStateEnum] = None
    has_access: Optional[StrictBool] = None
    version: Optional[StrictStr] = None
    is_default: Optional[StrictBool] = None
    production: Optional[StrictBool] = Field(default=None, description="specific flag to indicate that this cluster is a production one")
    ssh_keys: Optional[List[StrictStr]] = Field(default=None, description="Indicate your public ssh_key to remotely connect to your EC2 instance.")
    features: Optional[List[ClusterFeature]] = None
    deployment_status: Optional[ClusterDeploymentStatusEnum] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "updated_at", "organization", "name", "description", "region", "cloud_provider", "min_running_nodes", "max_running_nodes", "disk_size", "instance_type", "kubernetes", "cpu", "memory", "estimated_cloud_provider_cost", "status", "has_access", "version", "is_default", "production", "ssh_keys", "features", "deployment_status"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Cluster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "id",
                "created_at",
                "updated_at",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization:
            _dict['organization'] = self.organization.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in features (list)
        _items = []
        if self.features:
            for _item in self.features:
                if _item:
                    _items.append(_item.to_dict())
            _dict['features'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Cluster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "organization": ReferenceObject.from_dict(obj.get("organization")) if obj.get("organization") is not None else None,
            "name": obj.get("name"),
            "description": obj.get("description"),
            "region": obj.get("region"),
            "cloud_provider": obj.get("cloud_provider"),
            "min_running_nodes": obj.get("min_running_nodes") if obj.get("min_running_nodes") is not None else 1,
            "max_running_nodes": obj.get("max_running_nodes") if obj.get("max_running_nodes") is not None else 1,
            "disk_size": obj.get("disk_size") if obj.get("disk_size") is not None else 20,
            "instance_type": obj.get("instance_type"),
            "kubernetes": obj.get("kubernetes"),
            "cpu": obj.get("cpu"),
            "memory": obj.get("memory"),
            "estimated_cloud_provider_cost": obj.get("estimated_cloud_provider_cost"),
            "status": obj.get("status"),
            "has_access": obj.get("has_access"),
            "version": obj.get("version"),
            "is_default": obj.get("is_default"),
            "production": obj.get("production"),
            "ssh_keys": obj.get("ssh_keys"),
            "features": [ClusterFeature.from_dict(_item) for _item in obj.get("features")] if obj.get("features") is not None else None,
            "deployment_status": obj.get("deployment_status")
        })
        return _obj


