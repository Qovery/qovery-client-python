# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from typing_extensions import Annotated
from qovery.models.helm_port_request_ports_inner import HelmPortRequestPortsInner
from qovery.models.helm_request_all_of_source import HelmRequestAllOfSource
from qovery.models.helm_request_all_of_values_override import HelmRequestAllOfValuesOverride
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HelmRequest(BaseModel):
    """
    HelmRequest
    """ # noqa: E501
    ports: Optional[List[HelmPortRequestPortsInner]] = None
    name: StrictStr = Field(description="name is case insensitive")
    description: Optional[StrictStr] = None
    timeout_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=600, description="Maximum number of seconds allowed for helm to run before killing it and mark it as failed ")
    auto_preview: Optional[StrictBool] = Field(default=None, description="Indicates if the 'environment preview option' is enabled.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called or when a new commit is updated. If not specified, it takes the value of the `auto_preview` property from the associated environment. ")
    auto_deploy: StrictBool = Field(description="Specify if the helm will be automatically updated after receiving a new image tag or a new commit according to the source type.  ")
    source: HelmRequestAllOfSource
    arguments: List[StrictStr] = Field(description="The extra arguments to pass to helm")
    allow_cluster_wide_resources: Optional[StrictBool] = Field(default=False, description="If we should allow the chart to deploy object outside his specified namespace. Setting this flag to true, requires special rights ")
    values_override: HelmRequestAllOfValuesOverride
    __properties: ClassVar[List[str]] = ["ports", "name", "description", "timeout_sec", "auto_preview", "auto_deploy", "source", "arguments", "allow_cluster_wide_resources", "values_override"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HelmRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item in self.ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ports'] = _items
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of values_override
        if self.values_override:
            _dict['values_override'] = self.values_override.to_dict()
        # set to None if auto_preview (nullable) is None
        # and model_fields_set contains the field
        if self.auto_preview is None and "auto_preview" in self.model_fields_set:
            _dict['auto_preview'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HelmRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ports": [HelmPortRequestPortsInner.from_dict(_item) for _item in obj.get("ports")] if obj.get("ports") is not None else None,
            "name": obj.get("name"),
            "description": obj.get("description"),
            "timeout_sec": obj.get("timeout_sec") if obj.get("timeout_sec") is not None else 600,
            "auto_preview": obj.get("auto_preview"),
            "auto_deploy": obj.get("auto_deploy"),
            "source": HelmRequestAllOfSource.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "arguments": obj.get("arguments"),
            "allow_cluster_wide_resources": obj.get("allow_cluster_wide_resources") if obj.get("allow_cluster_wide_resources") is not None else False,
            "values_override": HelmRequestAllOfValuesOverride.from_dict(obj.get("values_override")) if obj.get("values_override") is not None else None
        })
        return _obj


