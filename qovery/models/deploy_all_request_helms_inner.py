# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class DeployAllRequestHelmsInner(BaseModel):
    """
    DeployAllRequestHelmsInner
    """
    id: Optional[StrictStr] = Field(None, description="id of the helm to be updated.")
    chart_version: Optional[StrictStr] = Field(None, description="The new chart version for the Helm source. Use this only if the helm has a Helm repository source.")
    git_commit_id: Optional[StrictStr] = Field(None, description="The commit Id to deploy. Use this only if the helm has a Git repository source.")
    values_override_git_commit_id: Optional[StrictStr] = Field(None, description="The commit Id of the override values to deploy. Use only if the helm has a Git override values repository.")
    __properties = ["id", "chart_version", "git_commit_id", "values_override_git_commit_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeployAllRequestHelmsInner:
        """Create an instance of DeployAllRequestHelmsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeployAllRequestHelmsInner:
        """Create an instance of DeployAllRequestHelmsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeployAllRequestHelmsInner.parse_obj(obj)

        _obj = DeployAllRequestHelmsInner.parse_obj({
            "id": obj.get("id"),
            "chart_version": obj.get("chart_version"),
            "git_commit_id": obj.get("git_commit_id"),
            "values_override_git_commit_id": obj.get("values_override_git_commit_id")
        })
        return _obj


