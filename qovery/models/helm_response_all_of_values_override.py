# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from qovery.models.helm_response_all_of_values_override_file import HelmResponseAllOfValuesOverrideFile

class HelmResponseAllOfValuesOverride(BaseModel):
    """
    Specify helm values you want to set or override   # noqa: E501
    """
    set: Optional[conlist(conlist(StrictStr))] = Field(None, description="The input is in json array format: [ [$KEY,$VALUE], [...] ]")
    set_string: Optional[conlist(conlist(StrictStr))] = Field(None, description="The input is in json array format: [ [$KEY,$VALUE], [...] ]")
    set_json: Optional[conlist(conlist(StrictStr))] = Field(None, description="The input is in json array format: [ [$KEY,$VALUE], [...] ]")
    file: Optional[HelmResponseAllOfValuesOverrideFile] = None
    __properties = ["set", "set_string", "set_json", "file"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HelmResponseAllOfValuesOverride:
        """Create an instance of HelmResponseAllOfValuesOverride from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict['file'] = self.file.to_dict()
        # set to None if file (nullable) is None
        # and __fields_set__ contains the field
        if self.file is None and "file" in self.__fields_set__:
            _dict['file'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HelmResponseAllOfValuesOverride:
        """Create an instance of HelmResponseAllOfValuesOverride from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HelmResponseAllOfValuesOverride.parse_obj(obj)

        _obj = HelmResponseAllOfValuesOverride.parse_obj({
            "set": obj.get("set"),
            "set_string": obj.get("set_string"),
            "set_json": obj.get("set_json"),
            "file": HelmResponseAllOfValuesOverrideFile.from_dict(obj.get("file")) if obj.get("file") is not None else None
        })
        return _obj


