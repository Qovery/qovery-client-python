# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class BillingInfoRequest(BaseModel):
    """
    BillingInfoRequest
    """
    first_name: StrictStr = Field(...)
    last_name: StrictStr = Field(...)
    email: StrictStr = Field(..., description="email used for billing, and to receive all invoices by email")
    address: StrictStr = Field(...)
    city: StrictStr = Field(...)
    zip: StrictStr = Field(...)
    state: Optional[StrictStr] = Field(None, description="only for US")
    country_code: StrictStr = Field(..., description="ISO code of the country")
    company: Optional[StrictStr] = Field(None, description="name of the company to bill")
    vat_number: Optional[StrictStr] = None
    __properties = ["first_name", "last_name", "email", "address", "city", "zip", "state", "country_code", "company", "vat_number"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BillingInfoRequest:
        """Create an instance of BillingInfoRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BillingInfoRequest:
        """Create an instance of BillingInfoRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BillingInfoRequest.parse_obj(obj)

        _obj = BillingInfoRequest.parse_obj({
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "address": obj.get("address"),
            "city": obj.get("city"),
            "zip": obj.get("zip"),
            "state": obj.get("state"),
            "country_code": obj.get("country_code"),
            "company": obj.get("company"),
            "vat_number": obj.get("vat_number")
        })
        return _obj


