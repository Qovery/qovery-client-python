# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ClusterRequestFeaturesInnerValueOneOf(BaseModel):
    """
    ClusterRequestFeaturesInnerValueOneOf
    """ # noqa: E501
    aws_vpc_eks_id: StrictStr
    eks_subnets_zone_a_ids: List[StrictStr]
    eks_subnets_zone_b_ids: List[StrictStr]
    eks_subnets_zone_c_ids: List[StrictStr]
    documentdb_subnets_zone_a_ids: Optional[List[StrictStr]] = None
    documentdb_subnets_zone_b_ids: Optional[List[StrictStr]] = None
    documentdb_subnets_zone_c_ids: Optional[List[StrictStr]] = None
    elasticache_subnets_zone_a_ids: Optional[List[StrictStr]] = None
    elasticache_subnets_zone_b_ids: Optional[List[StrictStr]] = None
    elasticache_subnets_zone_c_ids: Optional[List[StrictStr]] = None
    rds_subnets_zone_a_ids: Optional[List[StrictStr]] = None
    rds_subnets_zone_b_ids: Optional[List[StrictStr]] = None
    rds_subnets_zone_c_ids: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["aws_vpc_eks_id", "eks_subnets_zone_a_ids", "eks_subnets_zone_b_ids", "eks_subnets_zone_c_ids", "documentdb_subnets_zone_a_ids", "documentdb_subnets_zone_b_ids", "documentdb_subnets_zone_c_ids", "elasticache_subnets_zone_a_ids", "elasticache_subnets_zone_b_ids", "elasticache_subnets_zone_c_ids", "rds_subnets_zone_a_ids", "rds_subnets_zone_b_ids", "rds_subnets_zone_c_ids"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ClusterRequestFeaturesInnerValueOneOf from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if documentdb_subnets_zone_a_ids (nullable) is None
        # and model_fields_set contains the field
        if self.documentdb_subnets_zone_a_ids is None and "documentdb_subnets_zone_a_ids" in self.model_fields_set:
            _dict['documentdb_subnets_zone_a_ids'] = None

        # set to None if documentdb_subnets_zone_b_ids (nullable) is None
        # and model_fields_set contains the field
        if self.documentdb_subnets_zone_b_ids is None and "documentdb_subnets_zone_b_ids" in self.model_fields_set:
            _dict['documentdb_subnets_zone_b_ids'] = None

        # set to None if documentdb_subnets_zone_c_ids (nullable) is None
        # and model_fields_set contains the field
        if self.documentdb_subnets_zone_c_ids is None and "documentdb_subnets_zone_c_ids" in self.model_fields_set:
            _dict['documentdb_subnets_zone_c_ids'] = None

        # set to None if elasticache_subnets_zone_a_ids (nullable) is None
        # and model_fields_set contains the field
        if self.elasticache_subnets_zone_a_ids is None and "elasticache_subnets_zone_a_ids" in self.model_fields_set:
            _dict['elasticache_subnets_zone_a_ids'] = None

        # set to None if elasticache_subnets_zone_b_ids (nullable) is None
        # and model_fields_set contains the field
        if self.elasticache_subnets_zone_b_ids is None and "elasticache_subnets_zone_b_ids" in self.model_fields_set:
            _dict['elasticache_subnets_zone_b_ids'] = None

        # set to None if elasticache_subnets_zone_c_ids (nullable) is None
        # and model_fields_set contains the field
        if self.elasticache_subnets_zone_c_ids is None and "elasticache_subnets_zone_c_ids" in self.model_fields_set:
            _dict['elasticache_subnets_zone_c_ids'] = None

        # set to None if rds_subnets_zone_a_ids (nullable) is None
        # and model_fields_set contains the field
        if self.rds_subnets_zone_a_ids is None and "rds_subnets_zone_a_ids" in self.model_fields_set:
            _dict['rds_subnets_zone_a_ids'] = None

        # set to None if rds_subnets_zone_b_ids (nullable) is None
        # and model_fields_set contains the field
        if self.rds_subnets_zone_b_ids is None and "rds_subnets_zone_b_ids" in self.model_fields_set:
            _dict['rds_subnets_zone_b_ids'] = None

        # set to None if rds_subnets_zone_c_ids (nullable) is None
        # and model_fields_set contains the field
        if self.rds_subnets_zone_c_ids is None and "rds_subnets_zone_c_ids" in self.model_fields_set:
            _dict['rds_subnets_zone_c_ids'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ClusterRequestFeaturesInnerValueOneOf from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aws_vpc_eks_id": obj.get("aws_vpc_eks_id"),
            "eks_subnets_zone_a_ids": obj.get("eks_subnets_zone_a_ids"),
            "eks_subnets_zone_b_ids": obj.get("eks_subnets_zone_b_ids"),
            "eks_subnets_zone_c_ids": obj.get("eks_subnets_zone_c_ids"),
            "documentdb_subnets_zone_a_ids": obj.get("documentdb_subnets_zone_a_ids"),
            "documentdb_subnets_zone_b_ids": obj.get("documentdb_subnets_zone_b_ids"),
            "documentdb_subnets_zone_c_ids": obj.get("documentdb_subnets_zone_c_ids"),
            "elasticache_subnets_zone_a_ids": obj.get("elasticache_subnets_zone_a_ids"),
            "elasticache_subnets_zone_b_ids": obj.get("elasticache_subnets_zone_b_ids"),
            "elasticache_subnets_zone_c_ids": obj.get("elasticache_subnets_zone_c_ids"),
            "rds_subnets_zone_a_ids": obj.get("rds_subnets_zone_a_ids"),
            "rds_subnets_zone_b_ids": obj.get("rds_subnets_zone_b_ids"),
            "rds_subnets_zone_c_ids": obj.get("rds_subnets_zone_c_ids")
        })
        return _obj


