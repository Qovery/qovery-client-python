# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, StrictStr, conlist
from qovery.models.deploy_all_request_applications_inner import DeployAllRequestApplicationsInner
from qovery.models.deploy_all_request_containers_inner import DeployAllRequestContainersInner
from qovery.models.deploy_all_request_helms_inner import DeployAllRequestHelmsInner
from qovery.models.deploy_all_request_jobs_inner import DeployAllRequestJobsInner

class DeployAllRequest(BaseModel):
    """
    DeployAllRequest
    """
    applications: Optional[conlist(DeployAllRequestApplicationsInner)] = None
    databases: Optional[conlist(StrictStr)] = None
    containers: Optional[conlist(DeployAllRequestContainersInner)] = None
    jobs: Optional[conlist(DeployAllRequestJobsInner)] = None
    helms: Optional[conlist(DeployAllRequestHelmsInner)] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["applications", "databases", "containers", "jobs", "helms"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeployAllRequest:
        """Create an instance of DeployAllRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in applications (list)
        _items = []
        if self.applications:
            for _item in self.applications:
                if _item:
                    _items.append(_item.to_dict())
            _dict['applications'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in containers (list)
        _items = []
        if self.containers:
            for _item in self.containers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['containers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in jobs (list)
        _items = []
        if self.jobs:
            for _item in self.jobs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['jobs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in helms (list)
        _items = []
        if self.helms:
            for _item in self.helms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['helms'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeployAllRequest:
        """Create an instance of DeployAllRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeployAllRequest.parse_obj(obj)

        _obj = DeployAllRequest.parse_obj({
            "applications": [DeployAllRequestApplicationsInner.from_dict(_item) for _item in obj.get("applications")] if obj.get("applications") is not None else None,
            "databases": obj.get("databases"),
            "containers": [DeployAllRequestContainersInner.from_dict(_item) for _item in obj.get("containers")] if obj.get("containers") is not None else None,
            "jobs": [DeployAllRequestJobsInner.from_dict(_item) for _item in obj.get("jobs")] if obj.get("jobs") is not None else None,
            "helms": [DeployAllRequestHelmsInner.from_dict(_item) for _item in obj.get("helms")] if obj.get("helms") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


