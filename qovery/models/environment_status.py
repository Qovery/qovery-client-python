# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from qovery.models.environment_status_event_origin_enum import EnvironmentStatusEventOriginEnum
from qovery.models.state_enum import StateEnum

class EnvironmentStatus(BaseModel):
    """
    EnvironmentStatus
    """
    id: StrictStr = Field(...)
    state: StateEnum = Field(...)
    last_deployment_date: Optional[datetime] = None
    last_deployment_state: StateEnum = Field(...)
    last_deployment_id: Optional[StrictStr] = None
    total_deployment_duration_in_seconds: Optional[StrictInt] = None
    origin: Optional[EnvironmentStatusEventOriginEnum] = None
    triggered_by: Optional[StrictStr] = None
    __properties = ["id", "state", "last_deployment_date", "last_deployment_state", "last_deployment_id", "total_deployment_duration_in_seconds", "origin", "triggered_by"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EnvironmentStatus:
        """Create an instance of EnvironmentStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if last_deployment_date (nullable) is None
        # and __fields_set__ contains the field
        if self.last_deployment_date is None and "last_deployment_date" in self.__fields_set__:
            _dict['last_deployment_date'] = None

        # set to None if last_deployment_id (nullable) is None
        # and __fields_set__ contains the field
        if self.last_deployment_id is None and "last_deployment_id" in self.__fields_set__:
            _dict['last_deployment_id'] = None

        # set to None if total_deployment_duration_in_seconds (nullable) is None
        # and __fields_set__ contains the field
        if self.total_deployment_duration_in_seconds is None and "total_deployment_duration_in_seconds" in self.__fields_set__:
            _dict['total_deployment_duration_in_seconds'] = None

        # set to None if origin (nullable) is None
        # and __fields_set__ contains the field
        if self.origin is None and "origin" in self.__fields_set__:
            _dict['origin'] = None

        # set to None if triggered_by (nullable) is None
        # and __fields_set__ contains the field
        if self.triggered_by is None and "triggered_by" in self.__fields_set__:
            _dict['triggered_by'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EnvironmentStatus:
        """Create an instance of EnvironmentStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EnvironmentStatus.parse_obj(obj)

        _obj = EnvironmentStatus.parse_obj({
            "id": obj.get("id"),
            "state": obj.get("state"),
            "last_deployment_date": obj.get("last_deployment_date"),
            "last_deployment_state": obj.get("last_deployment_state"),
            "last_deployment_id": obj.get("last_deployment_id"),
            "total_deployment_duration_in_seconds": obj.get("total_deployment_duration_in_seconds"),
            "origin": obj.get("origin"),
            "triggered_by": obj.get("triggered_by")
        })
        return _obj


