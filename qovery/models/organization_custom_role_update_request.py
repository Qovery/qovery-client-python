# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from qovery.models.organization_custom_role_update_request_cluster_permissions_inner import OrganizationCustomRoleUpdateRequestClusterPermissionsInner
from qovery.models.organization_custom_role_update_request_project_permissions_inner import OrganizationCustomRoleUpdateRequestProjectPermissionsInner

class OrganizationCustomRoleUpdateRequest(BaseModel):
    """
    OrganizationCustomRoleUpdateRequest
    """
    name: StrictStr = Field(...)
    description: Optional[StrictStr] = None
    cluster_permissions: conlist(OrganizationCustomRoleUpdateRequestClusterPermissionsInner) = Field(..., description="Should contain an entry for every existing cluster")
    project_permissions: conlist(OrganizationCustomRoleUpdateRequestProjectPermissionsInner) = Field(..., description="Should contain an entry for every existing project")
    __properties = ["name", "description", "cluster_permissions", "project_permissions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrganizationCustomRoleUpdateRequest:
        """Create an instance of OrganizationCustomRoleUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in cluster_permissions (list)
        _items = []
        if self.cluster_permissions:
            for _item in self.cluster_permissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['cluster_permissions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in project_permissions (list)
        _items = []
        if self.project_permissions:
            for _item in self.project_permissions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['project_permissions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrganizationCustomRoleUpdateRequest:
        """Create an instance of OrganizationCustomRoleUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrganizationCustomRoleUpdateRequest.parse_obj(obj)

        _obj = OrganizationCustomRoleUpdateRequest.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "cluster_permissions": [OrganizationCustomRoleUpdateRequestClusterPermissionsInner.from_dict(_item) for _item in obj.get("cluster_permissions")] if obj.get("cluster_permissions") is not None else None,
            "project_permissions": [OrganizationCustomRoleUpdateRequestProjectPermissionsInner.from_dict(_item) for _item in obj.get("project_permissions")] if obj.get("project_permissions") is not None else None
        })
        return _obj


