# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from qovery.models.company_size_enum import CompanySizeEnum
from qovery.models.type_of_use_enum import TypeOfUseEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class SignUp(BaseModel):
    """
    SignUp
    """ # noqa: E501
    id: StrictStr
    created_at: datetime
    updated_at: Optional[datetime] = None
    first_name: StrictStr
    last_name: StrictStr
    user_email: StrictStr
    type_of_use: TypeOfUseEnum
    qovery_usage: StrictStr
    company_name: Optional[StrictStr] = None
    company_size: Optional[CompanySizeEnum] = None
    user_role: Optional[StrictStr] = None
    qovery_usage_other: Optional[StrictStr] = None
    user_questions: Optional[StrictStr] = None
    current_step: Optional[StrictStr] = None
    dx_auth: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "created_at", "updated_at", "first_name", "last_name", "user_email", "type_of_use", "qovery_usage", "company_name", "company_size", "user_role", "qovery_usage_other", "user_questions", "current_step", "dx_auth"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SignUp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "id",
                "created_at",
                "updated_at",
            },
            exclude_none=True,
        )
        # set to None if company_name (nullable) is None
        # and model_fields_set contains the field
        if self.company_name is None and "company_name" in self.model_fields_set:
            _dict['company_name'] = None

        # set to None if user_role (nullable) is None
        # and model_fields_set contains the field
        if self.user_role is None and "user_role" in self.model_fields_set:
            _dict['user_role'] = None

        # set to None if qovery_usage_other (nullable) is None
        # and model_fields_set contains the field
        if self.qovery_usage_other is None and "qovery_usage_other" in self.model_fields_set:
            _dict['qovery_usage_other'] = None

        # set to None if user_questions (nullable) is None
        # and model_fields_set contains the field
        if self.user_questions is None and "user_questions" in self.model_fields_set:
            _dict['user_questions'] = None

        # set to None if current_step (nullable) is None
        # and model_fields_set contains the field
        if self.current_step is None and "current_step" in self.model_fields_set:
            _dict['current_step'] = None

        # set to None if dx_auth (nullable) is None
        # and model_fields_set contains the field
        if self.dx_auth is None and "dx_auth" in self.model_fields_set:
            _dict['dx_auth'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of SignUp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "user_email": obj.get("user_email"),
            "type_of_use": obj.get("type_of_use"),
            "qovery_usage": obj.get("qovery_usage"),
            "company_name": obj.get("company_name"),
            "company_size": obj.get("company_size"),
            "user_role": obj.get("user_role"),
            "qovery_usage_other": obj.get("qovery_usage_other"),
            "user_questions": obj.get("user_questions"),
            "current_step": obj.get("current_step"),
            "dx_auth": obj.get("dx_auth")
        })
        return _obj


