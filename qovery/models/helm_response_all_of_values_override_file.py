# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel
from qovery.models.helm_response_all_of_values_override_file_git import HelmResponseAllOfValuesOverrideFileGit
from qovery.models.helm_response_all_of_values_override_file_raw import HelmResponseAllOfValuesOverrideFileRaw

class HelmResponseAllOfValuesOverrideFile(BaseModel):
    """
    HelmResponseAllOfValuesOverrideFile
    """
    raw: Optional[HelmResponseAllOfValuesOverrideFileRaw] = None
    git: Optional[HelmResponseAllOfValuesOverrideFileGit] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["raw", "git"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HelmResponseAllOfValuesOverrideFile:
        """Create an instance of HelmResponseAllOfValuesOverrideFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of raw
        if self.raw:
            _dict['raw'] = self.raw.to_dict()
        # override the default output from pydantic by calling `to_dict()` of git
        if self.git:
            _dict['git'] = self.git.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if raw (nullable) is None
        # and __fields_set__ contains the field
        if self.raw is None and "raw" in self.__fields_set__:
            _dict['raw'] = None

        # set to None if git (nullable) is None
        # and __fields_set__ contains the field
        if self.git is None and "git" in self.__fields_set__:
            _dict['git'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HelmResponseAllOfValuesOverrideFile:
        """Create an instance of HelmResponseAllOfValuesOverrideFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HelmResponseAllOfValuesOverrideFile.parse_obj(obj)

        _obj = HelmResponseAllOfValuesOverrideFile.parse_obj({
            "raw": HelmResponseAllOfValuesOverrideFileRaw.from_dict(obj.get("raw")) if obj.get("raw") is not None else None,
            "git": HelmResponseAllOfValuesOverrideFileGit.from_dict(obj.get("git")) if obj.get("git") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


