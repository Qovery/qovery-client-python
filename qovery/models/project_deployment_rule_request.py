# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from qovery.models.environment_mode_enum import EnvironmentModeEnum
from qovery.models.weekday_enum import WeekdayEnum

class ProjectDeploymentRuleRequest(BaseModel):
    """
    ProjectDeploymentRuleRequest
    """
    name: StrictStr = Field(..., description="name is case insensitive")
    description: Optional[StrictStr] = None
    mode: EnvironmentModeEnum = Field(...)
    cluster_id: StrictStr = Field(...)
    auto_stop: Optional[StrictBool] = False
    timezone: StrictStr = Field(...)
    start_time: datetime = Field(...)
    stop_time: datetime = Field(...)
    weekdays: conlist(WeekdayEnum) = Field(...)
    wildcard: StrictStr = Field(..., description="wildcard pattern composed of '?' and/or '*' used to target new created environments")
    __properties = ["name", "description", "mode", "cluster_id", "auto_stop", "timezone", "start_time", "stop_time", "weekdays", "wildcard"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProjectDeploymentRuleRequest:
        """Create an instance of ProjectDeploymentRuleRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProjectDeploymentRuleRequest:
        """Create an instance of ProjectDeploymentRuleRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProjectDeploymentRuleRequest.parse_obj(obj)

        _obj = ProjectDeploymentRuleRequest.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "mode": obj.get("mode"),
            "cluster_id": obj.get("cluster_id"),
            "auto_stop": obj.get("auto_stop") if obj.get("auto_stop") is not None else False,
            "timezone": obj.get("timezone"),
            "start_time": obj.get("start_time"),
            "stop_time": obj.get("stop_time"),
            "weekdays": obj.get("weekdays"),
            "wildcard": obj.get("wildcard") if obj.get("wildcard") is not None else ''
        })
        return _obj


