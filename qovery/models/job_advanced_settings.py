# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class JobAdvancedSettings(BaseModel):
    """
    JobAdvancedSettings
    """
    build_timeout_max_sec: Optional[StrictInt] = Field(None, alias="build.timeout_max_sec", description="define the max timeout for the build")
    build_cpu_max_in_milli: Optional[StrictInt] = Field(None, alias="build.cpu_max_in_milli", description="define the max cpu resources (in milli)")
    build_ram_max_in_gib: Optional[StrictInt] = Field(None, alias="build.ram_max_in_gib", description="define the max ram resources (in gib)")
    deployment_termination_grace_period_seconds: Optional[StrictInt] = Field(None, alias="deployment.termination_grace_period_seconds", description="define how long in seconds an application is supposed to be stopped gracefully")
    deployment_affinity_node_required: Optional[Dict[str, StrictStr]] = Field(None, alias="deployment.affinity.node.required", description="Set pod placement on specific Kubernetes nodes labels")
    job_delete_ttl_seconds_after_finished: Optional[StrictInt] = Field(None, alias="job.delete_ttl_seconds_after_finished")
    cronjob_concurrency_policy: Optional[StrictStr] = Field(None, alias="cronjob.concurrency_policy")
    cronjob_failed_jobs_history_limit: Optional[StrictInt] = Field(None, alias="cronjob.failed_jobs_history_limit")
    cronjob_success_jobs_history_limit: Optional[StrictInt] = Field(None, alias="cronjob.success_jobs_history_limit")
    security_service_account_name: Optional[StrictStr] = Field(None, alias="security.service_account_name", description="Allows you to set an existing Kubernetes service account name ")
    security_read_only_root_filesystem: Optional[StrictBool] = Field(None, alias="security.read_only_root_filesystem", description="Mounts the container's root filesystem as read-only ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["build.timeout_max_sec", "build.cpu_max_in_milli", "build.ram_max_in_gib", "deployment.termination_grace_period_seconds", "deployment.affinity.node.required", "job.delete_ttl_seconds_after_finished", "cronjob.concurrency_policy", "cronjob.failed_jobs_history_limit", "cronjob.success_jobs_history_limit", "security.service_account_name", "security.read_only_root_filesystem"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobAdvancedSettings:
        """Create an instance of JobAdvancedSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if job_delete_ttl_seconds_after_finished (nullable) is None
        # and __fields_set__ contains the field
        if self.job_delete_ttl_seconds_after_finished is None and "job_delete_ttl_seconds_after_finished" in self.__fields_set__:
            _dict['job.delete_ttl_seconds_after_finished'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobAdvancedSettings:
        """Create an instance of JobAdvancedSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobAdvancedSettings.parse_obj(obj)

        _obj = JobAdvancedSettings.parse_obj({
            "build_timeout_max_sec": obj.get("build.timeout_max_sec"),
            "build_cpu_max_in_milli": obj.get("build.cpu_max_in_milli"),
            "build_ram_max_in_gib": obj.get("build.ram_max_in_gib"),
            "deployment_termination_grace_period_seconds": obj.get("deployment.termination_grace_period_seconds"),
            "deployment_affinity_node_required": obj.get("deployment.affinity.node.required"),
            "job_delete_ttl_seconds_after_finished": obj.get("job.delete_ttl_seconds_after_finished"),
            "cronjob_concurrency_policy": obj.get("cronjob.concurrency_policy"),
            "cronjob_failed_jobs_history_limit": obj.get("cronjob.failed_jobs_history_limit"),
            "cronjob_success_jobs_history_limit": obj.get("cronjob.success_jobs_history_limit"),
            "security_service_account_name": obj.get("security.service_account_name"),
            "security_read_only_root_filesystem": obj.get("security.read_only_root_filesystem")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


