# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class JobAdvancedSettings(BaseModel):
    """
    JobAdvancedSettings
    """ # noqa: E501
    build_timeout_max_sec: Optional[StrictInt] = Field(default=None, description="define the max timeout for the build", alias="build.timeout_max_sec")
    build_cpu_max_in_milli: Optional[StrictInt] = Field(default=None, description="define the max cpu resources (in milli)", alias="build.cpu_max_in_milli")
    build_ram_max_in_gib: Optional[StrictInt] = Field(default=None, description="define the max ram resources (in gib)", alias="build.ram_max_in_gib")
    deployment_termination_grace_period_seconds: Optional[StrictInt] = Field(default=None, description="define how long in seconds an application is supposed to be stopped gracefully", alias="deployment.termination_grace_period_seconds")
    deployment_affinity_node_required: Optional[Dict[str, StrictStr]] = Field(default=None, description="Set pod placement on specific Kubernetes nodes labels", alias="deployment.affinity.node.required")
    job_delete_ttl_seconds_after_finished: Optional[StrictInt] = Field(default=None, alias="job.delete_ttl_seconds_after_finished")
    cronjob_concurrency_policy: Optional[StrictStr] = Field(default=None, alias="cronjob.concurrency_policy")
    cronjob_failed_jobs_history_limit: Optional[StrictInt] = Field(default=None, alias="cronjob.failed_jobs_history_limit")
    cronjob_success_jobs_history_limit: Optional[StrictInt] = Field(default=None, alias="cronjob.success_jobs_history_limit")
    security_service_account_name: Optional[StrictStr] = Field(default=None, description="Allows you to set an existing Kubernetes service account name ", alias="security.service_account_name")
    security_read_only_root_filesystem: Optional[StrictBool] = Field(default=None, description="Mounts the container's root filesystem as read-only ", alias="security.read_only_root_filesystem")
    __properties: ClassVar[List[str]] = ["build.timeout_max_sec", "build.cpu_max_in_milli", "build.ram_max_in_gib", "deployment.termination_grace_period_seconds", "deployment.affinity.node.required", "job.delete_ttl_seconds_after_finished", "cronjob.concurrency_policy", "cronjob.failed_jobs_history_limit", "cronjob.success_jobs_history_limit", "security.service_account_name", "security.read_only_root_filesystem"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of JobAdvancedSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # set to None if job_delete_ttl_seconds_after_finished (nullable) is None
        # and model_fields_set contains the field
        if self.job_delete_ttl_seconds_after_finished is None and "job_delete_ttl_seconds_after_finished" in self.model_fields_set:
            _dict['job.delete_ttl_seconds_after_finished'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of JobAdvancedSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "build.timeout_max_sec": obj.get("build.timeout_max_sec"),
            "build.cpu_max_in_milli": obj.get("build.cpu_max_in_milli"),
            "build.ram_max_in_gib": obj.get("build.ram_max_in_gib"),
            "deployment.termination_grace_period_seconds": obj.get("deployment.termination_grace_period_seconds"),
            "deployment.affinity.node.required": obj.get("deployment.affinity.node.required"),
            "job.delete_ttl_seconds_after_finished": obj.get("job.delete_ttl_seconds_after_finished"),
            "cronjob.concurrency_policy": obj.get("cronjob.concurrency_policy"),
            "cronjob.failed_jobs_history_limit": obj.get("cronjob.failed_jobs_history_limit"),
            "cronjob.success_jobs_history_limit": obj.get("cronjob.success_jobs_history_limit"),
            "security.service_account_name": obj.get("security.service_account_name"),
            "security.read_only_root_filesystem": obj.get("security.read_only_root_filesystem")
        })
        return _obj


