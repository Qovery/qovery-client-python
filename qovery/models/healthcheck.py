# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from qovery.models.probe import Probe

class Healthcheck(BaseModel):
    """
    Healthcheck
    """
    readiness_probe: Optional[Probe] = None
    liveness_probe: Optional[Probe] = None
    __properties = ["readiness_probe", "liveness_probe"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Healthcheck:
        """Create an instance of Healthcheck from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of readiness_probe
        if self.readiness_probe:
            _dict['readiness_probe'] = self.readiness_probe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of liveness_probe
        if self.liveness_probe:
            _dict['liveness_probe'] = self.liveness_probe.to_dict()
        # set to None if readiness_probe (nullable) is None
        # and __fields_set__ contains the field
        if self.readiness_probe is None and "readiness_probe" in self.__fields_set__:
            _dict['readiness_probe'] = None

        # set to None if liveness_probe (nullable) is None
        # and __fields_set__ contains the field
        if self.liveness_probe is None and "liveness_probe" in self.__fields_set__:
            _dict['liveness_probe'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Healthcheck:
        """Create an instance of Healthcheck from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Healthcheck.parse_obj(obj)

        _obj = Healthcheck.parse_obj({
            "readiness_probe": Probe.from_dict(obj.get("readiness_probe")) if obj.get("readiness_probe") is not None else None,
            "liveness_probe": Probe.from_dict(obj.get("liveness_probe")) if obj.get("liveness_probe") is not None else None
        })
        return _obj


