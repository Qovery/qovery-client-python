# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from qovery.models.plan_enum import PlanEnum

class OrganizationRequest(BaseModel):
    """
    OrganizationRequest
    """
    name: StrictStr = Field(..., description="name is case insensitive")
    description: Optional[StrictStr] = None
    plan: PlanEnum = Field(...)
    website_url: Optional[StrictStr] = None
    repository: Optional[StrictStr] = None
    logo_url: Optional[StrictStr] = None
    icon_url: Optional[StrictStr] = None
    admin_emails: Optional[conlist(StrictStr)] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["name", "description", "plan", "website_url", "repository", "logo_url", "icon_url", "admin_emails"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OrganizationRequest:
        """Create an instance of OrganizationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if website_url (nullable) is None
        # and __fields_set__ contains the field
        if self.website_url is None and "website_url" in self.__fields_set__:
            _dict['website_url'] = None

        # set to None if repository (nullable) is None
        # and __fields_set__ contains the field
        if self.repository is None and "repository" in self.__fields_set__:
            _dict['repository'] = None

        # set to None if logo_url (nullable) is None
        # and __fields_set__ contains the field
        if self.logo_url is None and "logo_url" in self.__fields_set__:
            _dict['logo_url'] = None

        # set to None if icon_url (nullable) is None
        # and __fields_set__ contains the field
        if self.icon_url is None and "icon_url" in self.__fields_set__:
            _dict['icon_url'] = None

        # set to None if admin_emails (nullable) is None
        # and __fields_set__ contains the field
        if self.admin_emails is None and "admin_emails" in self.__fields_set__:
            _dict['admin_emails'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OrganizationRequest:
        """Create an instance of OrganizationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OrganizationRequest.parse_obj(obj)

        _obj = OrganizationRequest.parse_obj({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "plan": obj.get("plan"),
            "website_url": obj.get("website_url"),
            "repository": obj.get("repository"),
            "logo_url": obj.get("logo_url"),
            "icon_url": obj.get("icon_url"),
            "admin_emails": obj.get("admin_emails")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


