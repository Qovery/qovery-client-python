# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class Link(BaseModel):
    """
    Link
    """
    url: Optional[StrictStr] = None
    internal_port: Optional[StrictInt] = Field(None, description="The port from which the service is reachable from within the cluster")
    external_port: Optional[StrictInt] = Field(None, description="The port from which the service is reachable from externally (i.e: 443 for HTTPS)")
    is_qovery_domain: Optional[StrictBool] = Field(None, description="True if the domain is managed by Qovery, false if it belongs to the user")
    is_default: Optional[StrictBool] = Field(None, description="Indicate if the link is using the root of the domain and not one derivated from port i.e: p8080.zxxxx.jvm.worl      => is_default = false, is_qovery = true zxxxx.jvm.world           => is_default = true, is_qovery = true p8080-my-super-domain.com => is_default = false, is_qovery = false my-super-domain.com       => is_default = true, is_qovery = false ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["url", "internal_port", "external_port", "is_qovery_domain", "is_default"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Link:
        """Create an instance of Link from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Link:
        """Create an instance of Link from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Link.parse_obj(obj)

        _obj = Link.parse_obj({
            "url": obj.get("url"),
            "internal_port": obj.get("internal_port"),
            "external_port": obj.get("external_port"),
            "is_qovery_domain": obj.get("is_qovery_domain"),
            "is_default": obj.get("is_default")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


