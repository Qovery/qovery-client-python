# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint, conlist
from qovery.models.helm_response_all_of_ports import HelmResponseAllOfPorts
from qovery.models.helm_response_all_of_source import HelmResponseAllOfSource
from qovery.models.helm_response_all_of_values_override import HelmResponseAllOfValuesOverride
from qovery.models.reference_object import ReferenceObject

class HelmResponse(BaseModel):
    """
    HelmResponse
    """
    id: StrictStr = Field(...)
    created_at: datetime = Field(...)
    updated_at: Optional[datetime] = None
    environment: ReferenceObject = Field(...)
    name: StrictStr = Field(..., description="name is case insensitive")
    description: Optional[StrictStr] = None
    timeout_sec: Optional[conint(strict=True, ge=0)] = Field(600, description="Maximum number of seconds allowed for helm to run before killing it and mark it as failed ")
    auto_preview: StrictBool = Field(..., description="Indicates if the 'environment preview option' is enabled.   If enabled, a preview environment will be automatically cloned when `/preview` endpoint is called.   If not specified, it takes the value of the `auto_preview` property from the associated environment. ")
    auto_deploy: StrictBool = Field(..., description="Specify if the service will be automatically updated after receiving a new image tag or a new commit according to the source type. ")
    ports: Optional[conlist(HelmResponseAllOfPorts)] = None
    source: HelmResponseAllOfSource = Field(...)
    arguments: conlist(StrictStr) = Field(..., description="The extra arguments to pass to helm")
    allow_cluster_wide_resources: StrictBool = Field(..., description="If we should allow the chart to deploy object outside his specified namespace. Setting this flag to true, requires special rights ")
    values_override: HelmResponseAllOfValuesOverride = Field(...)
    __properties = ["id", "created_at", "updated_at", "environment", "name", "description", "timeout_sec", "auto_preview", "auto_deploy", "ports", "source", "arguments", "allow_cluster_wide_resources", "values_override"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HelmResponse:
        """Create an instance of HelmResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "created_at",
                            "updated_at",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of environment
        if self.environment:
            _dict['environment'] = self.environment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item in self.ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ports'] = _items
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of values_override
        if self.values_override:
            _dict['values_override'] = self.values_override.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HelmResponse:
        """Create an instance of HelmResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HelmResponse.parse_obj(obj)

        _obj = HelmResponse.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "environment": ReferenceObject.from_dict(obj.get("environment")) if obj.get("environment") is not None else None,
            "name": obj.get("name"),
            "description": obj.get("description"),
            "timeout_sec": obj.get("timeout_sec") if obj.get("timeout_sec") is not None else 600,
            "auto_preview": obj.get("auto_preview"),
            "auto_deploy": obj.get("auto_deploy"),
            "ports": [HelmResponseAllOfPorts.from_dict(_item) for _item in obj.get("ports")] if obj.get("ports") is not None else None,
            "source": HelmResponseAllOfSource.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "arguments": obj.get("arguments"),
            "allow_cluster_wide_resources": obj.get("allow_cluster_wide_resources") if obj.get("allow_cluster_wide_resources") is not None else False,
            "values_override": HelmResponseAllOfValuesOverride.from_dict(obj.get("values_override")) if obj.get("values_override") is not None else None
        })
        return _obj


