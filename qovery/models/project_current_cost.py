# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from qovery.models.cost import Cost
from qovery.models.generic_object_current_cost import GenericObjectCurrentCost

class ProjectCurrentCost(BaseModel):
    """
    ProjectCurrentCost
    """
    id: StrictStr = Field(...)
    name: StrictStr = Field(...)
    consumed_time_in_seconds: StrictInt = Field(...)
    cost: Cost = Field(...)
    environments: Optional[conlist(GenericObjectCurrentCost)] = None
    __properties = ["id", "name", "consumed_time_in_seconds", "cost", "environments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProjectCurrentCost:
        """Create an instance of ProjectCurrentCost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cost
        if self.cost:
            _dict['cost'] = self.cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in environments (list)
        _items = []
        if self.environments:
            for _item in self.environments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['environments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProjectCurrentCost:
        """Create an instance of ProjectCurrentCost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProjectCurrentCost.parse_obj(obj)

        _obj = ProjectCurrentCost.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "consumed_time_in_seconds": obj.get("consumed_time_in_seconds"),
            "cost": Cost.from_dict(obj.get("cost")) if obj.get("cost") is not None else None,
            "environments": [GenericObjectCurrentCost.from_dict(_item) for _item in obj.get("environments")] if obj.get("environments") is not None else None
        })
        return _obj


