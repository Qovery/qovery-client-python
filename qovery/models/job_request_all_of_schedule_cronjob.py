# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist

class JobRequestAllOfScheduleCronjob(BaseModel):
    """
    JobRequestAllOfScheduleCronjob
    """
    arguments: Optional[conlist(StrictStr)] = None
    entrypoint: Optional[StrictStr] = Field(None, description="optional entrypoint when launching container")
    timezone: Optional[StrictStr] = Field(None, description="Specify a timezone identifier to run the schedule at. By default Etc/UTC")
    scheduled_at: StrictStr = Field(..., description="Can only be set if the event is CRON.   Represent the cron format for the job schedule without seconds.   For example: `* * * * *` represent the cron to launch the job every minute.   See https://crontab.guru/ to WISIWIG interface.   Timezone is UTC ")
    additional_properties: Dict[str, Any] = {}
    __properties = ["arguments", "entrypoint", "timezone", "scheduled_at"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> JobRequestAllOfScheduleCronjob:
        """Create an instance of JobRequestAllOfScheduleCronjob from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> JobRequestAllOfScheduleCronjob:
        """Create an instance of JobRequestAllOfScheduleCronjob from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return JobRequestAllOfScheduleCronjob.parse_obj(obj)

        _obj = JobRequestAllOfScheduleCronjob.parse_obj({
            "arguments": obj.get("arguments"),
            "entrypoint": obj.get("entrypoint"),
            "timezone": obj.get("timezone"),
            "scheduled_at": obj.get("scheduled_at")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


