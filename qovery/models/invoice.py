# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from qovery.models.invoice_status_enum import InvoiceStatusEnum

class Invoice(BaseModel):
    """
    Invoice
    """
    total_in_cents: StrictInt = Field(...)
    total: Union[StrictFloat, StrictInt] = Field(...)
    currency_code: StrictStr = Field(...)
    id: StrictStr = Field(...)
    created_at: datetime = Field(...)
    status: InvoiceStatusEnum = Field(...)
    __properties = ["total_in_cents", "total", "currency_code", "id", "created_at", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Invoice:
        """Create an instance of Invoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Invoice:
        """Create an instance of Invoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Invoice.parse_obj(obj)

        _obj = Invoice.parse_obj({
            "total_in_cents": obj.get("total_in_cents"),
            "total": obj.get("total"),
            "currency_code": obj.get("currency_code"),
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "status": obj.get("status")
        })
        return _obj


