# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from qovery.models.database_accessibility_enum import DatabaseAccessibilityEnum
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DatabaseEditRequest(BaseModel):
    """
    DatabaseEditRequest
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="name is case-insensitive")
    description: Optional[StrictStr] = Field(default=None, description="give a description to this database")
    version: Optional[StrictStr] = None
    accessibility: Optional[DatabaseAccessibilityEnum] = None
    cpu: Optional[StrictInt] = Field(default=250, description="unit is millicores (m). 1000m = 1 cpu. This field will be ignored for managed DB (instance type will be used instead). ")
    memory: Optional[StrictInt] = Field(default=None, description="unit is MB. 1024 MB = 1GB This field will be ignored for managed DB (instance type will be used instead). Default value is linked to the database type: - MANAGED: 100 - CONTAINER   - POSTGRES: 100   - REDIS: 100   - MYSQL: 512   - MONGODB: 256 ")
    storage: Optional[StrictInt] = Field(default=None, description="unit is GB")
    instance_type: Optional[StrictStr] = Field(default=None, description="Database instance type to be used for this database. The list of values can be retrieved via the endpoint /{CloudProvider}/managedDatabase/instanceType/{region}/{dbType}. This field SHOULD NOT be set for container DB.")
    __properties: ClassVar[List[str]] = ["name", "description", "version", "accessibility", "cpu", "memory", "storage", "instance_type"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DatabaseEditRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DatabaseEditRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "version": obj.get("version"),
            "accessibility": obj.get("accessibility"),
            "cpu": obj.get("cpu") if obj.get("cpu") is not None else 250,
            "memory": obj.get("memory"),
            "storage": obj.get("storage"),
            "instance_type": obj.get("instance_type")
        })
        return _obj


