# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class HelmAdvancedSettings(BaseModel):
    """
    HelmAdvancedSettings
    """
    deployment_custom_domain_check_enabled: Optional[StrictBool] = Field(None, alias="deployment.custom_domain_check_enabled", description="disable custom domain check when deploying a helm")
    network_ingress_proxy_body_size_mb: Optional[StrictInt] = Field(None, alias="network.ingress.proxy_body_size_mb")
    network_ingress_enable_cors: Optional[StrictBool] = Field(None, alias="network.ingress.enable_cors")
    network_ingress_cors_allow_origin: Optional[StrictStr] = Field(None, alias="network.ingress.cors_allow_origin")
    network_ingress_cors_allow_methods: Optional[StrictStr] = Field(None, alias="network.ingress.cors_allow_methods")
    network_ingress_cors_allow_headers: Optional[StrictStr] = Field(None, alias="network.ingress.cors_allow_headers")
    network_ingress_proxy_buffer_size_kb: Optional[StrictInt] = Field(None, alias="network.ingress.proxy_buffer_size_kb", description="header buffer size used while reading response header from upstream")
    network_ingress_keepalive_time_seconds: Optional[StrictInt] = Field(None, alias="network.ingress.keepalive_time_seconds", description="Limits the maximum time (in seconds) during which requests can be processed through one keepalive connection")
    network_ingress_keepalive_timeout_seconds: Optional[StrictInt] = Field(None, alias="network.ingress.keepalive_timeout_seconds", description="Sets a timeout (in seconds) during which an idle keepalive connection to an upstream server will stay open.")
    network_ingress_send_timeout_seconds: Optional[StrictInt] = Field(None, alias="network.ingress.send_timeout_seconds", description="Sets a timeout (in seconds) for transmitting a response to the client")
    network_ingress_proxy_connect_timeout_seconds: Optional[StrictInt] = Field(None, alias="network.ingress.proxy_connect_timeout_seconds", description="Sets a timeout (in seconds) for establishing a connection to a proxied server")
    network_ingress_proxy_send_timeout_seconds: Optional[StrictInt] = Field(None, alias="network.ingress.proxy_send_timeout_seconds", description="Sets a timeout (in seconds) for transmitting a request to the proxied server")
    network_ingress_proxy_read_timeout_seconds: Optional[StrictInt] = Field(None, alias="network.ingress.proxy_read_timeout_seconds", description="Sets a timeout (in seconds) for reading a response from the proxied server")
    network_ingress_proxy_buffering: Optional[StrictStr] = Field(None, alias="network.ingress.proxy_buffering", description="Allows to enable or disable nginx `proxy-buffering`")
    network_ingress_proxy_request_buffering: Optional[StrictStr] = Field(None, alias="network.ingress.proxy_request_buffering", description="Allows to enable or disable nginx `proxy-request-buffering`")
    network_ingress_grpc_send_timeout_seconds: Optional[StrictInt] = Field(None, alias="network.ingress.grpc_send_timeout_seconds", description="Sets a timeout (in seconds) for transmitting a request to the grpc server")
    network_ingress_grpc_read_timeout_seconds: Optional[StrictInt] = Field(None, alias="network.ingress.grpc_read_timeout_seconds", description="Sets a timeout (in seconds) for transmitting a request to the grpc server")
    network_ingress_whitelist_source_range: Optional[StrictStr] = Field(None, alias="network.ingress.whitelist_source_range", description="list of source ranges to allow access to ingress proxy.  This property can be used to whitelist source IP ranges for ingress proxy. The value is a comma separated list of CIDRs, e.g. 10.0.0.0/24,172.10.0.1 To allow all source ranges, set 0.0.0.0/0. ")
    network_ingress_denylist_source_range: Optional[StrictStr] = Field(None, alias="network.ingress.denylist_source_range", description="list of source ranges to deny access to ingress proxy.  This property can be used to blacklist source IP ranges for ingress proxy. The value is a comma separated list of CIDRs, e.g. 10.0.0.0/24,172.10.0.1 ")
    network_ingress_extra_headers: Optional[StrictStr] = Field(None, alias="network.ingress.extra_headers", description="Allows to define response headers")
    network_ingress_basic_auth_env_var: Optional[StrictStr] = Field(None, alias="network.ingress.basic_auth_env_var", description="Set the name of an environment variable to use as a basic authentication (`login:crypted_password`) from `htpasswd` command. You can add multiples comma separated values. ")
    network_ingress_enable_sticky_session: Optional[StrictBool] = Field(None, alias="network.ingress.enable_sticky_session", description="Enable the load balancer to bind a user's session to a specific target. This ensures that all requests from the user during the session are sent to the same target ")
    __properties = ["deployment.custom_domain_check_enabled", "network.ingress.proxy_body_size_mb", "network.ingress.enable_cors", "network.ingress.cors_allow_origin", "network.ingress.cors_allow_methods", "network.ingress.cors_allow_headers", "network.ingress.proxy_buffer_size_kb", "network.ingress.keepalive_time_seconds", "network.ingress.keepalive_timeout_seconds", "network.ingress.send_timeout_seconds", "network.ingress.proxy_connect_timeout_seconds", "network.ingress.proxy_send_timeout_seconds", "network.ingress.proxy_read_timeout_seconds", "network.ingress.proxy_buffering", "network.ingress.proxy_request_buffering", "network.ingress.grpc_send_timeout_seconds", "network.ingress.grpc_read_timeout_seconds", "network.ingress.whitelist_source_range", "network.ingress.denylist_source_range", "network.ingress.extra_headers", "network.ingress.basic_auth_env_var", "network.ingress.enable_sticky_session"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> HelmAdvancedSettings:
        """Create an instance of HelmAdvancedSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> HelmAdvancedSettings:
        """Create an instance of HelmAdvancedSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return HelmAdvancedSettings.parse_obj(obj)

        _obj = HelmAdvancedSettings.parse_obj({
            "deployment_custom_domain_check_enabled": obj.get("deployment.custom_domain_check_enabled"),
            "network_ingress_proxy_body_size_mb": obj.get("network.ingress.proxy_body_size_mb"),
            "network_ingress_enable_cors": obj.get("network.ingress.enable_cors"),
            "network_ingress_cors_allow_origin": obj.get("network.ingress.cors_allow_origin"),
            "network_ingress_cors_allow_methods": obj.get("network.ingress.cors_allow_methods"),
            "network_ingress_cors_allow_headers": obj.get("network.ingress.cors_allow_headers"),
            "network_ingress_proxy_buffer_size_kb": obj.get("network.ingress.proxy_buffer_size_kb"),
            "network_ingress_keepalive_time_seconds": obj.get("network.ingress.keepalive_time_seconds"),
            "network_ingress_keepalive_timeout_seconds": obj.get("network.ingress.keepalive_timeout_seconds"),
            "network_ingress_send_timeout_seconds": obj.get("network.ingress.send_timeout_seconds"),
            "network_ingress_proxy_connect_timeout_seconds": obj.get("network.ingress.proxy_connect_timeout_seconds"),
            "network_ingress_proxy_send_timeout_seconds": obj.get("network.ingress.proxy_send_timeout_seconds"),
            "network_ingress_proxy_read_timeout_seconds": obj.get("network.ingress.proxy_read_timeout_seconds"),
            "network_ingress_proxy_buffering": obj.get("network.ingress.proxy_buffering"),
            "network_ingress_proxy_request_buffering": obj.get("network.ingress.proxy_request_buffering"),
            "network_ingress_grpc_send_timeout_seconds": obj.get("network.ingress.grpc_send_timeout_seconds"),
            "network_ingress_grpc_read_timeout_seconds": obj.get("network.ingress.grpc_read_timeout_seconds"),
            "network_ingress_whitelist_source_range": obj.get("network.ingress.whitelist_source_range"),
            "network_ingress_denylist_source_range": obj.get("network.ingress.denylist_source_range"),
            "network_ingress_extra_headers": obj.get("network.ingress.extra_headers"),
            "network_ingress_basic_auth_env_var": obj.get("network.ingress.basic_auth_env_var"),
            "network_ingress_enable_sticky_session": obj.get("network.ingress.enable_sticky_session")
        })
        return _obj


