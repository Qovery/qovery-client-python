# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from qovery.models.git_provider_enum import GitProviderEnum

class ApplicationGitRepository(BaseModel):
    """
    ApplicationGitRepository
    """
    has_access: Optional[StrictBool] = None
    provider: GitProviderEnum = Field(...)
    owner: StrictStr = Field(...)
    url: StrictStr = Field(...)
    name: StrictStr = Field(..., description="repository name")
    branch: Optional[StrictStr] = None
    root_path: Optional[StrictStr] = None
    deployed_commit_id: Optional[StrictStr] = Field(None, description="Git commit ID corresponding to the deployed version of the app")
    deployed_commit_date: Optional[datetime] = Field(None, description="Git commit date corresponding to the deployed version of the app")
    deployed_commit_contributor: Optional[StrictStr] = Field(None, description="Git commit user corresponding to the deployed version of the app")
    deployed_commit_tag: Optional[StrictStr] = None
    git_token_id: Optional[StrictStr] = None
    git_token_name: Optional[StrictStr] = None
    additional_properties: Dict[str, Any] = {}
    __properties = ["has_access", "provider", "owner", "url", "name", "branch", "root_path", "deployed_commit_id", "deployed_commit_date", "deployed_commit_contributor", "deployed_commit_tag", "git_token_id", "git_token_name"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ApplicationGitRepository:
        """Create an instance of ApplicationGitRepository from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "deployed_commit_date",
                            "additional_properties"
                          },
                          exclude_none=True)
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if git_token_id (nullable) is None
        # and __fields_set__ contains the field
        if self.git_token_id is None and "git_token_id" in self.__fields_set__:
            _dict['git_token_id'] = None

        # set to None if git_token_name (nullable) is None
        # and __fields_set__ contains the field
        if self.git_token_name is None and "git_token_name" in self.__fields_set__:
            _dict['git_token_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ApplicationGitRepository:
        """Create an instance of ApplicationGitRepository from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApplicationGitRepository.parse_obj(obj)

        _obj = ApplicationGitRepository.parse_obj({
            "has_access": obj.get("has_access"),
            "provider": obj.get("provider"),
            "owner": obj.get("owner"),
            "url": obj.get("url"),
            "name": obj.get("name"),
            "branch": obj.get("branch"),
            "root_path": obj.get("root_path"),
            "deployed_commit_id": obj.get("deployed_commit_id"),
            "deployed_commit_date": obj.get("deployed_commit_date"),
            "deployed_commit_contributor": obj.get("deployed_commit_contributor"),
            "deployed_commit_tag": obj.get("deployed_commit_tag"),
            "git_token_id": obj.get("git_token_id"),
            "git_token_name": obj.get("git_token_name")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


