# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import io
import warnings

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Dict, List, Optional, Tuple, Union, Any

try:
    from typing import Annotated
except ImportError:
    from typing_extensions import Annotated

from pydantic import Field
from typing_extensions import Annotated
from pydantic import StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from qovery.models.organization_event_origin import OrganizationEventOrigin
from qovery.models.organization_event_response_list import OrganizationEventResponseList
from qovery.models.organization_event_sub_target_type import OrganizationEventSubTargetType
from qovery.models.organization_event_target_response_list import OrganizationEventTargetResponseList
from qovery.models.organization_event_target_type import OrganizationEventTargetType
from qovery.models.organization_event_type import OrganizationEventType

from qovery.api_client import ApiClient
from qovery.api_response import ApiResponse
from qovery.rest import RESTResponseType


class OrganizationEventApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_organization_event_targets(
        self,
        organization_id: Annotated[StrictStr, Field(description="Organization ID")],
        from_timestamp: Annotated[Optional[StrictStr], Field(description="Display targets available since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision ")] = None,
        to_timestamp: Annotated[Optional[StrictStr], Field(description="Display targets triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision ")] = None,
        event_type: Optional[OrganizationEventType] = None,
        target_type: Optional[OrganizationEventTargetType] = None,
        triggered_by: Annotated[Optional[StrictStr], Field(description="Information about the owner of the event (user name / apitoken / automatic action)")] = None,
        origin: Optional[OrganizationEventOrigin] = None,
        project_id: Annotated[Optional[StrictStr], Field(description="Mandatory when requesting an environment or a service")] = None,
        environment_id: Annotated[Optional[StrictStr], Field(description="Mandatory when requesting a service")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrganizationEventTargetResponseList:
        """Get available event targets to filter events

        Get available event targets to filter events

        :param organization_id: Organization ID (required)
        :type organization_id: str
        :param from_timestamp: Display targets available since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision 
        :type from_timestamp: str
        :param to_timestamp: Display targets triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision 
        :type to_timestamp: str
        :param event_type:
        :type event_type: OrganizationEventType
        :param target_type:
        :type target_type: OrganizationEventTargetType
        :param triggered_by: Information about the owner of the event (user name / apitoken / automatic action)
        :type triggered_by: str
        :param origin:
        :type origin: OrganizationEventOrigin
        :param project_id: Mandatory when requesting an environment or a service
        :type project_id: str
        :param environment_id: Mandatory when requesting a service
        :type environment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_event_targets_serialize(
            organization_id=organization_id,
            from_timestamp=from_timestamp,
            to_timestamp=to_timestamp,
            event_type=event_type,
            target_type=target_type,
            triggered_by=triggered_by,
            origin=origin,
            project_id=project_id,
            environment_id=environment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrganizationEventTargetResponseList",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_organization_event_targets_with_http_info(
        self,
        organization_id: Annotated[StrictStr, Field(description="Organization ID")],
        from_timestamp: Annotated[Optional[StrictStr], Field(description="Display targets available since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision ")] = None,
        to_timestamp: Annotated[Optional[StrictStr], Field(description="Display targets triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision ")] = None,
        event_type: Optional[OrganizationEventType] = None,
        target_type: Optional[OrganizationEventTargetType] = None,
        triggered_by: Annotated[Optional[StrictStr], Field(description="Information about the owner of the event (user name / apitoken / automatic action)")] = None,
        origin: Optional[OrganizationEventOrigin] = None,
        project_id: Annotated[Optional[StrictStr], Field(description="Mandatory when requesting an environment or a service")] = None,
        environment_id: Annotated[Optional[StrictStr], Field(description="Mandatory when requesting a service")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrganizationEventTargetResponseList]:
        """Get available event targets to filter events

        Get available event targets to filter events

        :param organization_id: Organization ID (required)
        :type organization_id: str
        :param from_timestamp: Display targets available since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision 
        :type from_timestamp: str
        :param to_timestamp: Display targets triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision 
        :type to_timestamp: str
        :param event_type:
        :type event_type: OrganizationEventType
        :param target_type:
        :type target_type: OrganizationEventTargetType
        :param triggered_by: Information about the owner of the event (user name / apitoken / automatic action)
        :type triggered_by: str
        :param origin:
        :type origin: OrganizationEventOrigin
        :param project_id: Mandatory when requesting an environment or a service
        :type project_id: str
        :param environment_id: Mandatory when requesting a service
        :type environment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_event_targets_serialize(
            organization_id=organization_id,
            from_timestamp=from_timestamp,
            to_timestamp=to_timestamp,
            event_type=event_type,
            target_type=target_type,
            triggered_by=triggered_by,
            origin=origin,
            project_id=project_id,
            environment_id=environment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrganizationEventTargetResponseList",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_organization_event_targets_without_preload_content(
        self,
        organization_id: Annotated[StrictStr, Field(description="Organization ID")],
        from_timestamp: Annotated[Optional[StrictStr], Field(description="Display targets available since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision ")] = None,
        to_timestamp: Annotated[Optional[StrictStr], Field(description="Display targets triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision ")] = None,
        event_type: Optional[OrganizationEventType] = None,
        target_type: Optional[OrganizationEventTargetType] = None,
        triggered_by: Annotated[Optional[StrictStr], Field(description="Information about the owner of the event (user name / apitoken / automatic action)")] = None,
        origin: Optional[OrganizationEventOrigin] = None,
        project_id: Annotated[Optional[StrictStr], Field(description="Mandatory when requesting an environment or a service")] = None,
        environment_id: Annotated[Optional[StrictStr], Field(description="Mandatory when requesting a service")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get available event targets to filter events

        Get available event targets to filter events

        :param organization_id: Organization ID (required)
        :type organization_id: str
        :param from_timestamp: Display targets available since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision 
        :type from_timestamp: str
        :param to_timestamp: Display targets triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision 
        :type to_timestamp: str
        :param event_type:
        :type event_type: OrganizationEventType
        :param target_type:
        :type target_type: OrganizationEventTargetType
        :param triggered_by: Information about the owner of the event (user name / apitoken / automatic action)
        :type triggered_by: str
        :param origin:
        :type origin: OrganizationEventOrigin
        :param project_id: Mandatory when requesting an environment or a service
        :type project_id: str
        :param environment_id: Mandatory when requesting a service
        :type environment_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_event_targets_serialize(
            organization_id=organization_id,
            from_timestamp=from_timestamp,
            to_timestamp=to_timestamp,
            event_type=event_type,
            target_type=target_type,
            triggered_by=triggered_by,
            origin=origin,
            project_id=project_id,
            environment_id=environment_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrganizationEventTargetResponseList",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_organization_event_targets_serialize(
        self,
        organization_id,
        from_timestamp,
        to_timestamp,
        event_type,
        target_type,
        triggered_by,
        origin,
        project_id,
        environment_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params['organizationId'] = organization_id
        # process the query parameters
        if from_timestamp is not None:
            
            _query_params.append(('fromTimestamp', from_timestamp))
            
        if to_timestamp is not None:
            
            _query_params.append(('toTimestamp', to_timestamp))
            
        if event_type is not None:
            
            _query_params.append(('eventType', event_type.value))
            
        if target_type is not None:
            
            _query_params.append(('targetType', target_type.value))
            
        if triggered_by is not None:
            
            _query_params.append(('triggeredBy', triggered_by))
            
        if origin is not None:
            
            _query_params.append(('origin', origin.value))
            
        if project_id is not None:
            
            _query_params.append(('projectId', project_id))
            
        if environment_id is not None:
            
            _query_params.append(('environmentId', environment_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/organization/{organizationId}/targets',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_organization_events(
        self,
        organization_id: Annotated[StrictStr, Field(description="Organization ID")],
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of events to display in the current page")] = None,
        from_timestamp: Annotated[Optional[StrictStr], Field(description="Display events triggered since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision ")] = None,
        to_timestamp: Annotated[Optional[StrictStr], Field(description="Display events triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision ")] = None,
        continue_token: Annotated[Optional[StrictStr], Field(description="Token used to fetch the next page results The format is a timestamp with nano precision ")] = None,
        step_back_token: Annotated[Optional[StrictStr], Field(description="Token used to fetch the previous page results The format is a timestamp with nano precision ")] = None,
        event_type: Optional[OrganizationEventType] = None,
        target_type: Optional[OrganizationEventTargetType] = None,
        target_id: Annotated[Optional[StrictStr], Field(description="The target resource id to search.   Must be specified with the corresponding `target_type` ")] = None,
        sub_target_type: Optional[OrganizationEventSubTargetType] = None,
        triggered_by: Annotated[Optional[StrictStr], Field(description="Information about the owner of the event (user name / apitoken / automatic action)")] = None,
        origin: Optional[OrganizationEventOrigin] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> OrganizationEventResponseList:
        """Get all events inside the organization

        Get all events inside the organization

        :param organization_id: Organization ID (required)
        :type organization_id: str
        :param page_size: The number of events to display in the current page
        :type page_size: float
        :param from_timestamp: Display events triggered since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision 
        :type from_timestamp: str
        :param to_timestamp: Display events triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision 
        :type to_timestamp: str
        :param continue_token: Token used to fetch the next page results The format is a timestamp with nano precision 
        :type continue_token: str
        :param step_back_token: Token used to fetch the previous page results The format is a timestamp with nano precision 
        :type step_back_token: str
        :param event_type:
        :type event_type: OrganizationEventType
        :param target_type:
        :type target_type: OrganizationEventTargetType
        :param target_id: The target resource id to search.   Must be specified with the corresponding `target_type` 
        :type target_id: str
        :param sub_target_type:
        :type sub_target_type: OrganizationEventSubTargetType
        :param triggered_by: Information about the owner of the event (user name / apitoken / automatic action)
        :type triggered_by: str
        :param origin:
        :type origin: OrganizationEventOrigin
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_events_serialize(
            organization_id=organization_id,
            page_size=page_size,
            from_timestamp=from_timestamp,
            to_timestamp=to_timestamp,
            continue_token=continue_token,
            step_back_token=step_back_token,
            event_type=event_type,
            target_type=target_type,
            target_id=target_id,
            sub_target_type=sub_target_type,
            triggered_by=triggered_by,
            origin=origin,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrganizationEventResponseList",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_organization_events_with_http_info(
        self,
        organization_id: Annotated[StrictStr, Field(description="Organization ID")],
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of events to display in the current page")] = None,
        from_timestamp: Annotated[Optional[StrictStr], Field(description="Display events triggered since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision ")] = None,
        to_timestamp: Annotated[Optional[StrictStr], Field(description="Display events triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision ")] = None,
        continue_token: Annotated[Optional[StrictStr], Field(description="Token used to fetch the next page results The format is a timestamp with nano precision ")] = None,
        step_back_token: Annotated[Optional[StrictStr], Field(description="Token used to fetch the previous page results The format is a timestamp with nano precision ")] = None,
        event_type: Optional[OrganizationEventType] = None,
        target_type: Optional[OrganizationEventTargetType] = None,
        target_id: Annotated[Optional[StrictStr], Field(description="The target resource id to search.   Must be specified with the corresponding `target_type` ")] = None,
        sub_target_type: Optional[OrganizationEventSubTargetType] = None,
        triggered_by: Annotated[Optional[StrictStr], Field(description="Information about the owner of the event (user name / apitoken / automatic action)")] = None,
        origin: Optional[OrganizationEventOrigin] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[OrganizationEventResponseList]:
        """Get all events inside the organization

        Get all events inside the organization

        :param organization_id: Organization ID (required)
        :type organization_id: str
        :param page_size: The number of events to display in the current page
        :type page_size: float
        :param from_timestamp: Display events triggered since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision 
        :type from_timestamp: str
        :param to_timestamp: Display events triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision 
        :type to_timestamp: str
        :param continue_token: Token used to fetch the next page results The format is a timestamp with nano precision 
        :type continue_token: str
        :param step_back_token: Token used to fetch the previous page results The format is a timestamp with nano precision 
        :type step_back_token: str
        :param event_type:
        :type event_type: OrganizationEventType
        :param target_type:
        :type target_type: OrganizationEventTargetType
        :param target_id: The target resource id to search.   Must be specified with the corresponding `target_type` 
        :type target_id: str
        :param sub_target_type:
        :type sub_target_type: OrganizationEventSubTargetType
        :param triggered_by: Information about the owner of the event (user name / apitoken / automatic action)
        :type triggered_by: str
        :param origin:
        :type origin: OrganizationEventOrigin
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_events_serialize(
            organization_id=organization_id,
            page_size=page_size,
            from_timestamp=from_timestamp,
            to_timestamp=to_timestamp,
            continue_token=continue_token,
            step_back_token=step_back_token,
            event_type=event_type,
            target_type=target_type,
            target_id=target_id,
            sub_target_type=sub_target_type,
            triggered_by=triggered_by,
            origin=origin,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrganizationEventResponseList",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_organization_events_without_preload_content(
        self,
        organization_id: Annotated[StrictStr, Field(description="Organization ID")],
        page_size: Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of events to display in the current page")] = None,
        from_timestamp: Annotated[Optional[StrictStr], Field(description="Display events triggered since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision ")] = None,
        to_timestamp: Annotated[Optional[StrictStr], Field(description="Display events triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision ")] = None,
        continue_token: Annotated[Optional[StrictStr], Field(description="Token used to fetch the next page results The format is a timestamp with nano precision ")] = None,
        step_back_token: Annotated[Optional[StrictStr], Field(description="Token used to fetch the previous page results The format is a timestamp with nano precision ")] = None,
        event_type: Optional[OrganizationEventType] = None,
        target_type: Optional[OrganizationEventTargetType] = None,
        target_id: Annotated[Optional[StrictStr], Field(description="The target resource id to search.   Must be specified with the corresponding `target_type` ")] = None,
        sub_target_type: Optional[OrganizationEventSubTargetType] = None,
        triggered_by: Annotated[Optional[StrictStr], Field(description="Information about the owner of the event (user name / apitoken / automatic action)")] = None,
        origin: Optional[OrganizationEventOrigin] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get all events inside the organization

        Get all events inside the organization

        :param organization_id: Organization ID (required)
        :type organization_id: str
        :param page_size: The number of events to display in the current page
        :type page_size: float
        :param from_timestamp: Display events triggered since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision 
        :type from_timestamp: str
        :param to_timestamp: Display events triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision 
        :type to_timestamp: str
        :param continue_token: Token used to fetch the next page results The format is a timestamp with nano precision 
        :type continue_token: str
        :param step_back_token: Token used to fetch the previous page results The format is a timestamp with nano precision 
        :type step_back_token: str
        :param event_type:
        :type event_type: OrganizationEventType
        :param target_type:
        :type target_type: OrganizationEventTargetType
        :param target_id: The target resource id to search.   Must be specified with the corresponding `target_type` 
        :type target_id: str
        :param sub_target_type:
        :type sub_target_type: OrganizationEventSubTargetType
        :param triggered_by: Information about the owner of the event (user name / apitoken / automatic action)
        :type triggered_by: str
        :param origin:
        :type origin: OrganizationEventOrigin
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_organization_events_serialize(
            organization_id=organization_id,
            page_size=page_size,
            from_timestamp=from_timestamp,
            to_timestamp=to_timestamp,
            continue_token=continue_token,
            step_back_token=step_back_token,
            event_type=event_type,
            target_type=target_type,
            target_id=target_id,
            sub_target_type=sub_target_type,
            triggered_by=triggered_by,
            origin=origin,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "OrganizationEventResponseList",
            '401': None,
            '403': None,
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_organization_events_serialize(
        self,
        organization_id,
        page_size,
        from_timestamp,
        to_timestamp,
        continue_token,
        step_back_token,
        event_type,
        target_type,
        target_id,
        sub_target_type,
        triggered_by,
        origin,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> Tuple:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if organization_id is not None:
            _path_params['organizationId'] = organization_id
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('pageSize', page_size))
            
        if from_timestamp is not None:
            
            _query_params.append(('fromTimestamp', from_timestamp))
            
        if to_timestamp is not None:
            
            _query_params.append(('toTimestamp', to_timestamp))
            
        if continue_token is not None:
            
            _query_params.append(('continueToken', continue_token))
            
        if step_back_token is not None:
            
            _query_params.append(('stepBackToken', step_back_token))
            
        if event_type is not None:
            
            _query_params.append(('eventType', event_type.value))
            
        if target_type is not None:
            
            _query_params.append(('targetType', target_type.value))
            
        if target_id is not None:
            
            _query_params.append(('targetId', target_id))
            
        if sub_target_type is not None:
            
            _query_params.append(('subTargetType', sub_target_type.value))
            
        if triggered_by is not None:
            
            _query_params.append(('triggeredBy', triggered_by))
            
        if origin is not None:
            
            _query_params.append(('origin', origin.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth', 
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/organization/{organizationId}/events',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


