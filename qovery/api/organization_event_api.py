# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictFloat, StrictInt, StrictStr

from typing import Optional, Union

from qovery.models.organization_event_origin import OrganizationEventOrigin
from qovery.models.organization_event_response_list import OrganizationEventResponseList
from qovery.models.organization_event_sub_target_type import OrganizationEventSubTargetType
from qovery.models.organization_event_target_response_list import OrganizationEventTargetResponseList
from qovery.models.organization_event_target_type import OrganizationEventTargetType
from qovery.models.organization_event_type import OrganizationEventType

from qovery.api_client import ApiClient
from qovery.api_response import ApiResponse
from qovery.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class OrganizationEventApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_organization_event_targets(self, organization_id : Annotated[StrictStr, Field(..., description="Organization ID")], from_timestamp : Annotated[Optional[StrictStr], Field(description="Display targets available since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision ")] = None, to_timestamp : Annotated[Optional[StrictStr], Field(description="Display targets triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision ")] = None, event_type : Optional[OrganizationEventType] = None, target_type : Optional[OrganizationEventTargetType] = None, triggered_by : Annotated[Optional[StrictStr], Field(description="Information about the owner of the event (user name / apitoken / automatic action)")] = None, origin : Optional[OrganizationEventOrigin] = None, project_id : Annotated[Optional[StrictStr], Field(description="Mandatory when requesting an environment or a service")] = None, environment_id : Annotated[Optional[StrictStr], Field(description="Mandatory when requesting a service")] = None, **kwargs) -> OrganizationEventTargetResponseList:  # noqa: E501
        """Get available event targets to filter events  # noqa: E501

        Get available event targets to filter events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organization_event_targets(organization_id, from_timestamp, to_timestamp, event_type, target_type, triggered_by, origin, project_id, environment_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: Organization ID (required)
        :type organization_id: str
        :param from_timestamp: Display targets available since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision 
        :type from_timestamp: str
        :param to_timestamp: Display targets triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision 
        :type to_timestamp: str
        :param event_type:
        :type event_type: OrganizationEventType
        :param target_type:
        :type target_type: OrganizationEventTargetType
        :param triggered_by: Information about the owner of the event (user name / apitoken / automatic action)
        :type triggered_by: str
        :param origin:
        :type origin: OrganizationEventOrigin
        :param project_id: Mandatory when requesting an environment or a service
        :type project_id: str
        :param environment_id: Mandatory when requesting a service
        :type environment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OrganizationEventTargetResponseList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_organization_event_targets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_organization_event_targets_with_http_info(organization_id, from_timestamp, to_timestamp, event_type, target_type, triggered_by, origin, project_id, environment_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_organization_event_targets_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="Organization ID")], from_timestamp : Annotated[Optional[StrictStr], Field(description="Display targets available since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision ")] = None, to_timestamp : Annotated[Optional[StrictStr], Field(description="Display targets triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision ")] = None, event_type : Optional[OrganizationEventType] = None, target_type : Optional[OrganizationEventTargetType] = None, triggered_by : Annotated[Optional[StrictStr], Field(description="Information about the owner of the event (user name / apitoken / automatic action)")] = None, origin : Optional[OrganizationEventOrigin] = None, project_id : Annotated[Optional[StrictStr], Field(description="Mandatory when requesting an environment or a service")] = None, environment_id : Annotated[Optional[StrictStr], Field(description="Mandatory when requesting a service")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get available event targets to filter events  # noqa: E501

        Get available event targets to filter events  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organization_event_targets_with_http_info(organization_id, from_timestamp, to_timestamp, event_type, target_type, triggered_by, origin, project_id, environment_id, async_req=True)
        >>> result = thread.get()

        :param organization_id: Organization ID (required)
        :type organization_id: str
        :param from_timestamp: Display targets available since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision 
        :type from_timestamp: str
        :param to_timestamp: Display targets triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision 
        :type to_timestamp: str
        :param event_type:
        :type event_type: OrganizationEventType
        :param target_type:
        :type target_type: OrganizationEventTargetType
        :param triggered_by: Information about the owner of the event (user name / apitoken / automatic action)
        :type triggered_by: str
        :param origin:
        :type origin: OrganizationEventOrigin
        :param project_id: Mandatory when requesting an environment or a service
        :type project_id: str
        :param environment_id: Mandatory when requesting a service
        :type environment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OrganizationEventTargetResponseList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'from_timestamp',
            'to_timestamp',
            'event_type',
            'target_type',
            'triggered_by',
            'origin',
            'project_id',
            'environment_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_event_targets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']


        # process the query parameters
        _query_params = []
        if _params.get('from_timestamp') is not None:  # noqa: E501
            _query_params.append(('fromTimestamp', _params['from_timestamp']))

        if _params.get('to_timestamp') is not None:  # noqa: E501
            _query_params.append(('toTimestamp', _params['to_timestamp']))

        if _params.get('event_type') is not None:  # noqa: E501
            _query_params.append(('eventType', _params['event_type'].value))

        if _params.get('target_type') is not None:  # noqa: E501
            _query_params.append(('targetType', _params['target_type'].value))

        if _params.get('triggered_by') is not None:  # noqa: E501
            _query_params.append(('triggeredBy', _params['triggered_by']))

        if _params.get('origin') is not None:  # noqa: E501
            _query_params.append(('origin', _params['origin'].value))

        if _params.get('project_id') is not None:  # noqa: E501
            _query_params.append(('projectId', _params['project_id']))

        if _params.get('environment_id') is not None:  # noqa: E501
            _query_params.append(('environmentId', _params['environment_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "OrganizationEventTargetResponseList",
            '401': None,
            '403': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/organization/{organizationId}/targets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_organization_events(self, organization_id : Annotated[StrictStr, Field(..., description="Organization ID")], page_size : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of events to display in the current page")] = None, from_timestamp : Annotated[Optional[StrictStr], Field(description="Display events triggered since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision ")] = None, to_timestamp : Annotated[Optional[StrictStr], Field(description="Display events triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision ")] = None, continue_token : Annotated[Optional[StrictStr], Field(description="Token used to fetch the next page results The format is a timestamp with nano precision ")] = None, step_back_token : Annotated[Optional[StrictStr], Field(description="Token used to fetch the previous page results The format is a timestamp with nano precision ")] = None, event_type : Optional[OrganizationEventType] = None, target_type : Optional[OrganizationEventTargetType] = None, target_id : Annotated[Optional[StrictStr], Field(description="The target resource id to search.   Must be specified with the corresponding `target_type` ")] = None, sub_target_type : Optional[OrganizationEventSubTargetType] = None, triggered_by : Annotated[Optional[StrictStr], Field(description="Information about the owner of the event (user name / apitoken / automatic action)")] = None, origin : Optional[OrganizationEventOrigin] = None, **kwargs) -> OrganizationEventResponseList:  # noqa: E501
        """Get all events inside the organization  # noqa: E501

        Get all events inside the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organization_events(organization_id, page_size, from_timestamp, to_timestamp, continue_token, step_back_token, event_type, target_type, target_id, sub_target_type, triggered_by, origin, async_req=True)
        >>> result = thread.get()

        :param organization_id: Organization ID (required)
        :type organization_id: str
        :param page_size: The number of events to display in the current page
        :type page_size: float
        :param from_timestamp: Display events triggered since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision 
        :type from_timestamp: str
        :param to_timestamp: Display events triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision 
        :type to_timestamp: str
        :param continue_token: Token used to fetch the next page results The format is a timestamp with nano precision 
        :type continue_token: str
        :param step_back_token: Token used to fetch the previous page results The format is a timestamp with nano precision 
        :type step_back_token: str
        :param event_type:
        :type event_type: OrganizationEventType
        :param target_type:
        :type target_type: OrganizationEventTargetType
        :param target_id: The target resource id to search.   Must be specified with the corresponding `target_type` 
        :type target_id: str
        :param sub_target_type:
        :type sub_target_type: OrganizationEventSubTargetType
        :param triggered_by: Information about the owner of the event (user name / apitoken / automatic action)
        :type triggered_by: str
        :param origin:
        :type origin: OrganizationEventOrigin
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OrganizationEventResponseList
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_organization_events_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_organization_events_with_http_info(organization_id, page_size, from_timestamp, to_timestamp, continue_token, step_back_token, event_type, target_type, target_id, sub_target_type, triggered_by, origin, **kwargs)  # noqa: E501

    @validate_arguments
    def get_organization_events_with_http_info(self, organization_id : Annotated[StrictStr, Field(..., description="Organization ID")], page_size : Annotated[Optional[Union[StrictFloat, StrictInt]], Field(description="The number of events to display in the current page")] = None, from_timestamp : Annotated[Optional[StrictStr], Field(description="Display events triggered since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision ")] = None, to_timestamp : Annotated[Optional[StrictStr], Field(description="Display events triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision ")] = None, continue_token : Annotated[Optional[StrictStr], Field(description="Token used to fetch the next page results The format is a timestamp with nano precision ")] = None, step_back_token : Annotated[Optional[StrictStr], Field(description="Token used to fetch the previous page results The format is a timestamp with nano precision ")] = None, event_type : Optional[OrganizationEventType] = None, target_type : Optional[OrganizationEventTargetType] = None, target_id : Annotated[Optional[StrictStr], Field(description="The target resource id to search.   Must be specified with the corresponding `target_type` ")] = None, sub_target_type : Optional[OrganizationEventSubTargetType] = None, triggered_by : Annotated[Optional[StrictStr], Field(description="Information about the owner of the event (user name / apitoken / automatic action)")] = None, origin : Optional[OrganizationEventOrigin] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Get all events inside the organization  # noqa: E501

        Get all events inside the organization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_organization_events_with_http_info(organization_id, page_size, from_timestamp, to_timestamp, continue_token, step_back_token, event_type, target_type, target_id, sub_target_type, triggered_by, origin, async_req=True)
        >>> result = thread.get()

        :param organization_id: Organization ID (required)
        :type organization_id: str
        :param page_size: The number of events to display in the current page
        :type page_size: float
        :param from_timestamp: Display events triggered since this timestamp.   A range of date can be specified by using `from-timestamp` with `to-timestamp` The format is a timestamp with nano precision 
        :type from_timestamp: str
        :param to_timestamp: Display events triggered before this timestamp.   A range of date can be specified by using `to-timestamp` with `from-timestamp` The format is a timestamp with nano precision 
        :type to_timestamp: str
        :param continue_token: Token used to fetch the next page results The format is a timestamp with nano precision 
        :type continue_token: str
        :param step_back_token: Token used to fetch the previous page results The format is a timestamp with nano precision 
        :type step_back_token: str
        :param event_type:
        :type event_type: OrganizationEventType
        :param target_type:
        :type target_type: OrganizationEventTargetType
        :param target_id: The target resource id to search.   Must be specified with the corresponding `target_type` 
        :type target_id: str
        :param sub_target_type:
        :type sub_target_type: OrganizationEventSubTargetType
        :param triggered_by: Information about the owner of the event (user name / apitoken / automatic action)
        :type triggered_by: str
        :param origin:
        :type origin: OrganizationEventOrigin
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OrganizationEventResponseList, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'organization_id',
            'page_size',
            'from_timestamp',
            'to_timestamp',
            'continue_token',
            'step_back_token',
            'event_type',
            'target_type',
            'target_id',
            'sub_target_type',
            'triggered_by',
            'origin'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organization_events" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['organization_id']:
            _path_params['organizationId'] = _params['organization_id']


        # process the query parameters
        _query_params = []
        if _params.get('page_size') is not None:  # noqa: E501
            _query_params.append(('pageSize', _params['page_size']))

        if _params.get('from_timestamp') is not None:  # noqa: E501
            _query_params.append(('fromTimestamp', _params['from_timestamp']))

        if _params.get('to_timestamp') is not None:  # noqa: E501
            _query_params.append(('toTimestamp', _params['to_timestamp']))

        if _params.get('continue_token') is not None:  # noqa: E501
            _query_params.append(('continueToken', _params['continue_token']))

        if _params.get('step_back_token') is not None:  # noqa: E501
            _query_params.append(('stepBackToken', _params['step_back_token']))

        if _params.get('event_type') is not None:  # noqa: E501
            _query_params.append(('eventType', _params['event_type'].value))

        if _params.get('target_type') is not None:  # noqa: E501
            _query_params.append(('targetType', _params['target_type'].value))

        if _params.get('target_id') is not None:  # noqa: E501
            _query_params.append(('targetId', _params['target_id']))

        if _params.get('sub_target_type') is not None:  # noqa: E501
            _query_params.append(('subTargetType', _params['sub_target_type'].value))

        if _params.get('triggered_by') is not None:  # noqa: E501
            _query_params.append(('triggeredBy', _params['triggered_by']))

        if _params.get('origin') is not None:  # noqa: E501
            _query_params.append(('origin', _params['origin'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ApiKeyAuth', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "OrganizationEventResponseList",
            '401': None,
            '403': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/organization/{organizationId}/events', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
