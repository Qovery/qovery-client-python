# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from qovery.models.cron_job_response import CronJobResponse  # noqa: E501

class TestCronJobResponse(unittest.TestCase):
    """CronJobResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> CronJobResponse:
        """Test CronJobResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `CronJobResponse`
        """
        model = CronJobResponse()  # noqa: E501
        if include_optional:
            return CronJobResponse(
                id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                environment = qovery.models.reference_object.ReferenceObject(
                    id = '', ),
                maximum_cpu = 16000,
                maximum_memory = 16384,
                name = '',
                description = '',
                cpu = 1250,
                memory = 1024,
                max_nb_restart = 0,
                max_duration_seconds = 0,
                auto_preview = True,
                port = 1,
                source = None,
                healthchecks = qovery.models.healthcheck.Healthcheck(
                    readiness_probe = qovery.models.probe.Probe(
                        type = qovery.models.probe_type.Probe_type(
                            tcp = qovery.models.probe_type_tcp.Probe_type_tcp(
                                port = 56, 
                                host = '', ), 
                            http = qovery.models.probe_type_http.Probe_type_http(
                                path = '/', 
                                scheme = 'HTTP', 
                                port = 56, ), 
                            exec = qovery.models.probe_type_exec.Probe_type_exec(
                                command = [
                                    ''
                                    ], ), 
                            grpc = qovery.models.probe_type_grpc.Probe_type_grpc(
                                service = '', 
                                port = 56, ), ), 
                        initial_delay_seconds = 56, 
                        period_seconds = 56, 
                        timeout_seconds = 56, 
                        success_threshold = 56, 
                        failure_threshold = 56, ), 
                    liveness_probe = qovery.models.probe.Probe(
                        initial_delay_seconds = 56, 
                        period_seconds = 56, 
                        timeout_seconds = 56, 
                        success_threshold = 56, 
                        failure_threshold = 56, ), ),
                auto_deploy = True,
                job_type = 'CRON',
                schedule = qovery.models.cron_job_response_all_of_schedule.CronJobResponse_allOf_schedule(
                    cronjob = qovery.models.cron_job_response_all_of_schedule_cronjob.CronJobResponse_allOf_schedule_cronjob(
                        arguments = [
                            ''
                            ], 
                        entrypoint = '', 
                        timezone = '', 
                        scheduled_at = '', ), )
            )
        else:
            return CronJobResponse(
                id = '',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                environment = qovery.models.reference_object.ReferenceObject(
                    id = '', ),
                maximum_cpu = 16000,
                maximum_memory = 16384,
                name = '',
                cpu = 1250,
                memory = 1024,
                auto_preview = True,
                source = None,
                healthchecks = qovery.models.healthcheck.Healthcheck(
                    readiness_probe = qovery.models.probe.Probe(
                        type = qovery.models.probe_type.Probe_type(
                            tcp = qovery.models.probe_type_tcp.Probe_type_tcp(
                                port = 56, 
                                host = '', ), 
                            http = qovery.models.probe_type_http.Probe_type_http(
                                path = '/', 
                                scheme = 'HTTP', 
                                port = 56, ), 
                            exec = qovery.models.probe_type_exec.Probe_type_exec(
                                command = [
                                    ''
                                    ], ), 
                            grpc = qovery.models.probe_type_grpc.Probe_type_grpc(
                                service = '', 
                                port = 56, ), ), 
                        initial_delay_seconds = 56, 
                        period_seconds = 56, 
                        timeout_seconds = 56, 
                        success_threshold = 56, 
                        failure_threshold = 56, ), 
                    liveness_probe = qovery.models.probe.Probe(
                        initial_delay_seconds = 56, 
                        period_seconds = 56, 
                        timeout_seconds = 56, 
                        success_threshold = 56, 
                        failure_threshold = 56, ), ),
                job_type = 'CRON',
                schedule = qovery.models.cron_job_response_all_of_schedule.CronJobResponse_allOf_schedule(
                    cronjob = qovery.models.cron_job_response_all_of_schedule_cronjob.CronJobResponse_allOf_schedule_cronjob(
                        arguments = [
                            ''
                            ], 
                        entrypoint = '', 
                        timezone = '', 
                        scheduled_at = '', ), ),
        )
        """

    def testCronJobResponse(self):
        """Test CronJobResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
