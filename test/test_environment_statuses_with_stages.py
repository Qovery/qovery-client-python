# coding: utf-8

"""
    Qovery API

    - Qovery is the fastest way to deploy your full-stack apps on any Cloud provider. - ℹ️ The API is stable and still in development. 

    The version of the OpenAPI document: 1.0.3
    Contact: support+api+documentation@qovery.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from qovery.models.environment_statuses_with_stages import EnvironmentStatusesWithStages  # noqa: E501

class TestEnvironmentStatusesWithStages(unittest.TestCase):
    """EnvironmentStatusesWithStages unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EnvironmentStatusesWithStages:
        """Test EnvironmentStatusesWithStages
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EnvironmentStatusesWithStages`
        """
        model = EnvironmentStatusesWithStages()  # noqa: E501
        if include_optional:
            return EnvironmentStatusesWithStages(
                environment = qovery.models.environment_status.EnvironmentStatus(
                    id = '', 
                    state = 'BUILDING', 
                    last_deployment_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_deployment_state = 'BUILDING', 
                    last_deployment_id = '', 
                    total_deployment_duration_in_seconds = 56, 
                    origin = 'API', 
                    triggered_by = '', ),
                stages = [
                    qovery.models.deployment_stage_with_services_statuses.DeploymentStageWithServicesStatuses(
                        applications = [
                            qovery.models.status.Status(
                                id = '', 
                                state = 'BUILDING', 
                                service_deployment_status = 'NEVER_DEPLOYED', 
                                last_deployment_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                is_part_last_deployment = True, 
                                steps = qovery.models.service_step_metrics.ServiceStepMetrics(
                                    total_duration_sec = 56, 
                                    total_computing_duration_sec = 56, 
                                    details = [
                                        qovery.models.service_step_metric.ServiceStepMetric(
                                            step_name = 'REGISTRY_CREATE_REPOSITORY', 
                                            status = 'SUCCESS', 
                                            duration_sec = 56, )
                                        ], ), )
                            ], 
                        containers = [
                            qovery.models.status.Status(
                                id = '', 
                                state = 'BUILDING', 
                                service_deployment_status = 'NEVER_DEPLOYED', 
                                last_deployment_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                is_part_last_deployment = True, )
                            ], 
                        jobs = [
                            
                            ], 
                        databases = [
                            
                            ], 
                        helms = [
                            
                            ], 
                        stage = qovery.models.stage.Stage(
                            id = '', 
                            name = '', ), )
                    ]
            )
        else:
            return EnvironmentStatusesWithStages(
        )
        """

    def testEnvironmentStatusesWithStages(self):
        """Test EnvironmentStatusesWithStages"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
